.. !split

.. _wave:app:

Applications of wave equations
==============================

This section presents a range of wave equation models
for different physical phenomena. Although many wave motion problems
in physics can be modeled by the standard linear wave equation, or a similar
formulation with a system of first-order equations, there are some
exceptions. Perhaps the most important is water waves: these are modeled by
the Laplace equation with time-dependent boundary conditions at
the water surface (long water waves, however, can be approximated
by a standard wave equation, see the section :ref:`wave:app:sw:2D`).
Quantum mechanical waves constitute another example where the waves
are governed by the
Schrodinger
equation, i.e., not by a standard wave equation.
Many wave phenomena also need to take nonlinear effects into account
when the wave amplitude is significant. Shock waves in the air is
a primary example.

The derivations in the following are very brief. Those with a firm
background in continuum mechanics will probably have enough
information to fill in the details, while other readers will hopefully
get some impression of the physics and approximations involved when
establishing wave equation models.

.. _wave:app:string:

Waves on a string
-----------------

.. _wave:app:string:fig:

.. figure:: wave_on_string.png
   :width: 800

   *Discrete string model with point masses connected by elastic strings*

Figure :ref:`wave:app:string:fig` shows a model we may use to derive
the equation for waves on a string. The string is modeled as a
set of discrete point masses (at mesh points) with
elastic strings in between. The string has a large constant tension :math:`T`.
We let the mass at mesh point :math:`x_i` be :math:`m_i`. The displacement of
this mass point in :math:`y` direction is denoted by :math:`u_i(t)`.

The motion of mass :math:`m_i` is governed by Newton's second law of motion.
The position of the mass at time :math:`t` is :math:`x_i\ii + u_i(t)\jj`, where
:math:`\ii` and :math:`\jj` are unit vectors in the :math:`x` and :math:`y` direction, respectively.
The acceleration is then :math:`u_i''(t)\jj`. Two forces are acting
on the mass as indicated in Figure :ref:`wave:app:string:fig`.
The force :math:`\T^{-}` acting toward the point :math:`x_{i-1}` can be decomposed
as

.. math::
         \T^{-} = -T\sin\phi\ii -T\cos\phi\jj, 

where :math:`\phi` is the angle between the force and the
line :math:`x=x_i`. Let :math:`\Delta u_i = u_i - u_{i-1}` and let
:math:`\Delta s_i = \sqrt{\Delta u_i^2 + (x_i - x_{i-1})^2}`
be the distance from mass :math:`m_{i-1}` to mass :math:`m_i`.
It is seen that :math:`\cos\phi = \Delta u_i/\Delta s_i` and :math:`\sin\phi =
(x_{i}-x_{i-1})/\Delta s` or :math:`\Delta x/\Delta s_i` if we
introduce a constant mesh spacing :math:`\Delta x = x_i - x_{i-1}`.
The force can then be written

.. math::
         \T^{-} = -T\frac{\Delta x}{\Delta s_i}\ii - T\frac{\Delta u_i}{\Delta s_i}\jj
        \tp
        

The force :math:`\T^{+}` acting toward :math:`x_{i+1}` can be calculated in a similar way:

.. math::
         \T^{+} = T\frac{\Delta x}{\Delta s_{i+1}}\ii +
                    T\frac{\Delta u_{i+1}}{\Delta s_{i+1}}\jj
        \tp
        

Newton's second law becomes

.. math::
         m_iu_i''(t)\jj = \T^{+} + \T^{-},

which gives the component equations

.. _Eq:wave:app:string:hcomp:

.. math::

    \tag{200}
    T\frac{\Delta x}{\Delta s_i} = T\frac{\Delta x}{\Delta s_{i+1}},
        
        

.. _Eq:wave:app:string:vcomp:

.. math::

    \tag{201}
    m_iu_i''(t) = T\frac{\Delta u_{i+1}}{\Delta s_{i+1}} -
                       T\frac{\Delta u_i}{\Delta s_i}
        
        \tp
        

A basic reasonable assumption for a string
is small displacements :math:`u_i` and small
displacement gradients :math:`\Delta u_i/\Delta x`. For small :math:`g=\Delta u_i/\Delta x`
we have that

.. math::
         \Delta s_i = \sqrt{\Delta u_i^2 + \Delta x^2} = \Delta x\sqrt{1 + g^2}
        + \Delta x (1 + {\half}g^2 + {\cal O}(g^4) \approx \Delta x
        \tp
        

Equation :ref:`(200) <Eq:wave:app:string:hcomp>` is then simply the identity :math:`T=T`, while
:ref:`(201) <Eq:wave:app:string:vcomp>` can be written as

.. math::
        
        m_iu_i''(t) = T\frac{\Delta u_{i+1}}{\Delta x} - T\frac{\Delta u_i}{\Delta x},
        

which upon division by :math:`\Delta x` and introducing the density
:math:`\varrho_i = m_i/\Delta x` becomes

.. _Eq:wave:app:string:model0:

.. math::

    \tag{202}
    \varrho_i u_i''(t) = T\frac{1}{\Delta x^2}
        \left( u_{i+1} - 2u_i + u_{i-1}\right)
        
        \tp
        

We can now choose to approximate :math:`u_i''` by a finite difference in time
and get the discretized wave equation,

.. _Eq:_auto71:

.. math::

    \tag{203}
    \varrho_i \frac{1}{\Delta t^2}
        \left(u^{n+1}_i - 2u^n_i - u^{n-1}_i\right) =
        T\frac{1}{\Delta x^2}
        \left( u_{i+1} - 2u_i + u_{i-1}\right)\tp
        
        

On the other hand, we may go to the continuum limit :math:`\Delta x\rightarrow 0` and
replace :math:`u_i(t)` by :math:`u(x,t)`, :math:`\varrho_i` by :math:`\varrho(x)`, and
recognize that the right-hand side of :ref:`(202) <Eq:wave:app:string:model0>`
approaches :math:`\partial^2 u/\partial x^2` as :math:`\Delta x\rightarrow 0`.
We end up with the continuous model for waves on a string:

.. _Eq:wave:app:string:model1:

.. math::

    \tag{204}
    \varrho\frac{\partial^2 u}{\partial t^2} = T\frac{\partial^2 u}{\partial x^2}
        
        \tp
        

Note that the density :math:`\varrho` may change along the string, while the
tension :math:`T` is a constant. With variable wave velocity :math:`c(x) = \sqrt{T/\varrho(x)}` we can write the wave equation in the more standard form

.. _Eq:wave:app:string:model2:

.. math::

    \tag{205}
    \frac{\partial^2 u}{\partial t^2} = c^2(x)\frac{\partial^2 u}{\partial x^2}
        
        \tp
        

Because of the way :math:`\varrho` enters the equations, the variable wave
velocity does *not* appear inside the derivatives as in many other
versions of the wave equation. However, most strings of interest have
constant :math:`\varrho`.

The end points of a string are fixed so that the displacement
:math:`u` is zero. The boundary conditions are therefore :math:`u=0`.

Damping
~~~~~~~

Air resistance and non-elastic effects in the string will contribute
to reduce the amplitudes of the waves so that the motion dies out
after some time. This damping effect can be modeled by a term
:math:`bu_t` on the left-hand side of the equation

.. _Eq:wave:app:string:model1:damping:

.. math::

    \tag{206}
    \varrho\frac{\partial^2 u}{\partial t^2}
        + b\frac{\partial u}{\partial t}  =  T\frac{\partial^2 u}{\partial x^2}
        
        \tp
        

The parameter :math:`b\geq 0` is small for most wave phenomena, but the
damping effect may become significant in long time simulations.

External forcing
~~~~~~~~~~~~~~~~

It is easy to include an external force acting on the string.
Say we have a vertical force :math:`\tilde f_i\jj` acting on mass :math:`m_i`.
This force affects the vertical component of Newton's law
and gives rise to an extra term :math:`\tilde f(x,t)` on the right-hand side of
:ref:`(204) <Eq:wave:app:string:model1>`. In the model
:ref:`(205) <Eq:wave:app:string:model2>` we would add a term
:math:`f(x,t) = \tilde f(x,y)/\varrho(x)`.

Modeling the tension via springs
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

We assumed, in the derivation above, that the tension in the string, :math:`T`,
was constant. It is easy to check this assumption by modeling the
string segments between the masses as standard springs, where the
force (tension :math:`T`) is proportional to the elongation of the spring segment.
Let :math:`k` be the spring constant, and set :math:`T_i=k\Delta \ell` for the
tension in the spring segment between :math:`x_{i-1}` and :math:`x_i`, where
:math:`\Delta\ell` is the elongation of this segment from the tension-free state.
A basic feature of a string is that it has high tension in the
equilibrium position :math:`u=0`. Let the string segment have an elongation
:math:`\Delta\ell_0` in the equilibrium position. After deformation of the
string, the elongation is :math:`\Delta \ell = \Delta \ell_0 + \Delta s_i`:
:math:`T_i = k(\Delta \ell_0 + \Delta s_i)\approx k(\Delta \ell_0 + \Delta x)`.
This shows that :math:`T_i` is independent of :math:`i`. Moreover, the extra
approximate elongation :math:`\Delta x` is very small compared to :math:`\Delta\ell_0`,
so we may well set :math:`T_i = T = k\Delta\ell_0`. This means that
the tension is completely dominated by the initial tension determined
by the tuning of the string. The additional deformations of the
spring during the vibrations do not introduce significant changes in the
tension.

.. _wave:app:membrane:

Waves on a membrane
-------------------

[**hpl 12**: Must write the memberane model. Easiest to use Navier.]

.. _wave:app:elastic:rod:

Elastic waves in a rod
----------------------

Consider an elastic rod subject to a hammer impact at the end.
This experiment will give rise to an elastic deformation pulse that travels
through the rod. A mathematical model for longitudinal waves along
an elastic rod starts with the general equation for deformations
and stresses in an elastic medium,

.. _Eq:wave:app:elastic:rod:eqmotion:

.. math::

    \tag{207}
    \varrho\u_{tt} = \nabla\cdot\stress + \varrho\f,
        
        

where :math:`\varrho` is the density, :math:`\u` the displacement field, :math:`\stress` the
stress tensor, and :math:`\f` body forces. The latter has normally no impact
on elastic waves.

For stationary deformation of an elastic rod, one has that
:math:`\sigma_{xx} = Eu_x`, with all other
stress components being zero.
The parameter :math:`E` is known as Young's modulus.
Moreover, we set :math:`\u = u(x,t)\ii` and neglect the radial contraction
and expansion (where Poisson's ratio is the important parameter).
Assuming that this simple stress and deformation field
is a good approximation, :ref:`(207) <Eq:wave:app:elastic:rod:eqmotion>` simplifies
to

.. _Eq:wave:app:elastic:rod:eq:

.. math::

    \tag{208}
    \varrho\frac{\partial^2 u}{\partial t^2} = \frac{\partial}{\partial x}
        \left( E\frac{\partial u}{\partial x}\right)
        
        \tp
        

The associated boundary conditions are :math:`u` or :math:`\sigma_{xx}=Eu_x` known,
typically
:math:`u=0` for a fixed end and :math:`\sigma_{xx}=0` for a free end.

.. _wave:app:acoustic:seismic:

The acoustic model for seismic waves
------------------------------------

Seismic waves are used to infer properties of subsurface
geological structures. The physical model is a heterogeneous
elastic medium where sound is propagated by small elastic
vibrations. The general mathematical model for deformations
in an elastic medium is based on Newton's second law,

.. _Eq:wave:app:acoustic:seismic:eqmotion:

.. math::

    \tag{209}
    \varrho\u_{tt} = \nabla\cdot\stress + \varrho\f,
        
        

and a constitutive law relating :math:`\stress` to :math:`\u`, often Hooke's
generalized law,

.. _Eq:wave:app:acoustic:seismic:Hooke:

.. math::

    \tag{210}
    \stress = K\nabla\cdot\u\, \I  + G(\nabla\u + (\nabla\u)^T - \frac{2}{3}\nabla\cdot\u\, \I)
        
        \tp
        

Here, :math:`\u` is the displacement field, :math:`\stress` is the stress tensor,
:math:`\I` is the identity tensor,
:math:`\varrho` is the medium's density, :math:`\f` are body forces (such as gravity),
:math:`K` is the medium's bulk modulus and :math:`G` is the shear modulus.
All these quantities may vary in space, while :math:`\u` and :math:`\stress` will
also show significant variation in time during wave motion.

The acoustic approximation to elastic waves arises from a basic
assumption that the second term in Hooke's law, representing the
deformations that give rise to shear stresses, can be neglected.
This assumption can be interpreted as approximating the geological
medium by a fluid.
Neglecting also the body forces :math:`\f`,
:ref:`(209) <Eq:wave:app:acoustic:seismic:eqmotion>` becomes

.. _Eq:wave:app:acoustic:seismic:eqmotion2:

.. math::

    \tag{211}
    \varrho\u_{tt} = \nabla (K\nabla\cdot\u )
        
        

Introducing :math:`p` as a pressure via

.. _Eq:wave:app:acoustic:seismic:eqmotion3:

.. math::

    \tag{212}
    p=-K\nabla\cdot\u,
        
        

and dividing :ref:`(211) <Eq:wave:app:acoustic:seismic:eqmotion2>` by :math:`\varrho`,
we get

.. _Eq:_auto72:

.. math::

    \tag{213}
    \u_{tt} = -\frac{1}{\varrho}\nabla p
        \tp
        
        

Taking the divergence of this equation, using :math:`\nabla\cdot\u = -p/K`
from :ref:`(212) <Eq:wave:app:acoustic:seismic:eqmotion3>`,
gives the *acoustic approximation to elastic waves*:

.. _Eq:wave:app:acoustic:seismic:accoustic1:

.. math::

    \tag{214}
    p_{tt} = K\nabla\cdot\left(\frac{1}{\varrho}\nabla p\right)
        \tp
        
        

This is a standard, linear wave equation with variable coefficients.
It is common to add a source term :math:`s(x,y,z,t)`
to model the generation of sound waves:

.. _Eq:wave:app:acoustic:seismic:accoustic:

.. math::

    \tag{215}
    p_{tt} = K\nabla\cdot\left(\frac{1}{\varrho}\nabla p\right) + s
        \tp
        
        

A common additional approximation of :ref:`(215) <Eq:wave:app:acoustic:seismic:accoustic>`
is based on using the chain rule on the right-hand side,

.. math::
        
        K\nabla\cdot\left(\frac{1}{\varrho}\nabla p\right)
        = \frac{K}{\varrho}\nabla^2 p + K\nabla\left(\frac{1}{\varrho}\right)\cdot
        \nabla p \approx \frac{K}{\varrho}\nabla^2 p,
        

under the assumption that
the relative spatial gradient :math:`\nabla\varrho^{-1}
= -\varrho^{-2}\nabla\varrho` is small. This approximation results
in the simplified equation

.. _Eq:wave:app:acoustic:seismic:accoustic1:const:

.. math::

    \tag{216}
    p_{tt} = \frac{K}{\varrho}\nabla^2 p + s
        \tp
        
        

The acoustic approximations to seismic waves are used for sound
waves in the ground, and the Earth's surface is then a boundary
where :math:`p` equals the atmospheric pressure :math:`p_0` such that the
boundary condition becomes :math:`p=p_0`.

Anisotropy
~~~~~~~~~~

Quite often in geological materials, the effective wave velocity
:math:`c=\sqrt{K/\varrho}` is different in different spatial directions
because geological layers are compacted, and often twisted, in such a
way that the properties in the horizontal and vertical direction
differ. With :math:`z` as the vertical coordinate, we can introduce a
vertical wave velocity :math:`c_z` and a horizontal wave velocity :math:`c_h`, and
generalize :ref:`(216) <Eq:wave:app:acoustic:seismic:accoustic1:const>` to

.. _Eq:wave:app:acoustic:seismic:accoustic1a:

.. math::

    \tag{217}
    p_{tt} = c_z^2 p_{zz} + c_h^2 (p_{xx} + p_{yy}) + s
        \tp
        
        

.. _wave:app:sound:

Sound waves in liquids and gases
--------------------------------

Sound waves arise from pressure and density variations in fluids.
The starting point of modeling sound waves is the basic
equations for a compressible fluid where we omit viscous (frictional)
forces, body forces (gravity, for instance), and temperature effects:

.. _Eq:wave:app:sound:cont:

.. math::

    \tag{218}
    \varrho_t + \nabla\cdot (\varrho \u) = 0,
        
        

.. _Eq:wave:app:sound:Euler:

.. math::

    \tag{219}
    \varrho \u_{t} + \varrho \u\cdot\nabla\u = -\nabla p,
        
        

.. _Eq:wave:app:sound:prho:

.. math::

    \tag{220}
    \varrho = \varrho (p)
        \tp
        
        

These equations are often referred to as the Euler equations for the motion
of a fluid. The parameters involved are the density :math:`\varrho`,
the velocity :math:`\u`,
and the pressure :math:`p`. Equation :ref:`(219) <Eq:wave:app:sound:Euler>` reflects
mass balance, :ref:`(218) <Eq:wave:app:sound:cont>` is Newton's second law for
a fluid, with frictional and body forces omitted, and
:ref:`(220) <Eq:wave:app:sound:prho>` is a constitutive law relating
density to pressure by thermodynamic considerations.
A typical model
for :ref:`(220) <Eq:wave:app:sound:prho>` is the so-called `isentropic relation <http://en.wikipedia.org/wiki/Isentropic_process>`__, valid for
adiabatic processes where there is no heat transfer:

.. _Eq:wave:app:sound:prho:formula:

.. math::

    \tag{221}
    \varrho = \varrho_0\left(\frac{p}{p_0}\right)^{1/\gamma}
        \tp
        
        

Here, :math:`p_0` and :math:`\varrho_0` are references values for :math:`p` and :math:`\varrho` when the fluid is at rest, and
:math:`\gamma` is the ratio of specific heat at constant pressure and
constant volume (:math:`\gamma = 5/3` for air).

The key approximation in a mathematical model for sound waves is to
assume that these waves are small perturbations to the density, pressure,
and velocity. We therefore write

.. math::
        
        p &= p_0 + \hat p,\\ 
        \varrho &= \varrho_0 + \hat\varrho,\\ 
        \u &= \hat\u,
        

where we have decomposed the fields in a constant
equilibrium value, corresponding
to :math:`\u=0`, and a small perturbation marked with a hat symbol.
By inserting these decompositions in :ref:`(218) <Eq:wave:app:sound:cont>` and
:ref:`(219) <Eq:wave:app:sound:Euler>`, neglecting all product terms of small
perturbations and/or their derivatives, and dropping the hat symbols,
one gets the following linearized PDE system for the small perturbations in
density, pressure, and velocity:

.. _Eq:_auto73:

.. math::

    \tag{222}
    \varrho_t + \varrho_0\nabla\cdot\u = 0,
        
        

.. _Eq:_auto74:

.. math::

    \tag{223}
    \varrho_0\u_t = -\nabla p
        \tp
        
        

Now we can eliminate :math:`\varrho_t` by differentiating the relation :math:`\varrho(p)`,

.. math::
         \varrho_t = \varrho_0 \frac{1}{\gamma}\left(\frac{p}{p_0}\right)^{1/\gamma-1}
        \frac{1}{p_0}p_t = \frac{\varrho_0}{\gamma p_0}
        \left(\frac{p}{p_0}\right)^{1/\gamma-1}p_t
        \tp
        

The product term :math:`p^{1/\gamma -1}p_t` can be linearized as
:math:`p_0^{1/\gamma -1}p_t`, resulting in

.. math::
         \varrho_t \approx \frac{\varrho_0}{\gamma p_0} p_t
        \tp  

We then get

.. _Eq:wave:app:sound:cont:pert:

.. math::

    \tag{224}
    p_t + \gamma p_0\nabla\cdot\u = 0,
        
        

.. _Eq:wave:app:sound:Euler:pert:

.. math::

    \tag{225}
    \u_t = -\frac{1}{\varrho_0}\nabla p,
        
        \tp
        

Taking the divergence of :ref:`(225) <Eq:wave:app:sound:Euler:pert>` and
differentiating :ref:`(224) <Eq:wave:app:sound:cont:pert>` with respect to time
gives the possibility to easily eliminate :math:`\nabla\cdot\u_t` and
arrive at a standard, linear wave equation for :math:`p`:

.. _Eq:_auto75:

.. math::

    \tag{226}
    p_{tt} = c^2\nabla^2 p,
        
        

where :math:`c = \sqrt{\gamma p_0/\varrho_0}` is the speed of sound in the fluid.

.. Challenge: have p_0(z) and varrho_0(z) and gravity - perhaps exercise?

.. _wave:app:spherical:

Spherical waves
---------------

Spherically symmetric three-dimensional
waves propagate in the radial direction :math:`r` only so that
:math:`u = u(r,t)`. The fully three-dimensional wave equation

.. math::
         \frac{\partial^2u}{\partial t^2}=\nabla\cdot (c^2\nabla u) + f 

then reduces to the spherically symmetric wave equation

.. _Eq:_auto76:

.. math::

    \tag{227}
    \frac{\partial^2u}{\partial t^2}=\frac{1}{r^2}\frac{\partial}{\partial r}
        \left(c^2(r)r^2\frac{\partial u}{\partial t}\right)
        + f(r,t),\quad r\in (0,R),\ t>0
        \tp
        
        

One can easily show
that the function :math:`v(r,t) = ru(r,t)` fulfills a standard wave equation
in Cartesian coordinates if :math:`c` is constant. To this end, insert :math:`u=v/r` in

.. math::
         \frac{1}{r^2}\frac{\partial}{\partial r}
        \left(c^2(r)r^2\frac{\partial u}{\partial t}\right) 

to obtain

.. math::
         r\left(\frac{d c^2}{dr}\frac{\partial v}{\partial r} +
        c^2\frac{\partial^2 v}{\partial r^2}\right) - \frac{d c^2}{dr}v
        \tp
        

The two terms in the parenthesis can be combined to

.. math::
         r\frac{\partial}{\partial r}\left( c^2\frac{\partial v}{\partial r}\right),
        

which is recognized as the variable-coefficient Laplace operator in
one Cartesian coordinate. The spherically symmetric wave equation in
terms of :math:`v(r,t)` now becomes

.. _Eq:_auto77:

.. math::

    \tag{228}
    \frac{\partial^2v}{\partial t^2}=
        \frac{\partial}{\partial r}
        \left(c^2(r)\frac{\partial v}{\partial r}\right)
        -\frac{1}{r}\frac{d c^2}{dr}v + rf(r,t),\quad r\in (0,R),\ t>0
        \tp
        
        

In the case of constant wave velocity :math:`c`, this equation reduces to
the wave equation in a single Cartesian coordinate called :math:`r`:

.. _Eq:wave:app:rsymm:Cart:

.. math::

    \tag{229}
    \frac{\partial^2v}{\partial t^2}=
        c^2 \frac{\partial^2 v}{\partial r^2}
        + rf(r,t),\quad r\in (0,R),\ t>0
        \tp
        
        

That is, any program for solving the one-dimensional wave equation
in a Cartesian coordinate system can be used to
solve :ref:`(229) <Eq:wave:app:rsymm:Cart>`, provided the source term is
multiplied by the coordinate, and that we divide the Cartesian mesh
solution by :math:`r` to get the spherically symmetric solution.
Moreover, if :math:`r=0` is included in the
domain, spherical symmetry demands that :math:`\partial u/\partial r=0` at
:math:`r=0`, which means that

.. math::
         \frac{\partial u}{\partial r} = \frac{1}{r^2}\left(
        r\frac{\partial v}{\partial r} - v\right) = 0,\quad r=0,
        

implying :math:`v(0,t)=0` as a necessary condition. For practical applications,
we exclude :math:`r=0` from the domain and assume that some boundary
condition is assigned at :math:`r=\epsilon`, for some :math:`\epsilon >0`.

.. _wave:app:sw:2D:

The linear shallow water equations
----------------------------------

The next example considers water waves whose wavelengths are much
lager than the depth and whose wave amplitudes are small. This class
of waves may be generated by catastrophic geophysical events, such as
earthquakes at the sea bottom, landslides moving into water, or
underwater slides (or a combination, as earthquakes frequently release
avalanches of masses). For example, a subsea earthquake will normally
have an extension of many kilometers but lift the water only a few
meters. The wave length will have a size dictated by the earthquake
area, which is much lager than the water depth, and compared to this
wave length, an amplitude of a few meters is very small.
The water is essentially a thin film, and mathematically we can average
the problem in the vertical direction and approximate the 3D
wave phenomenon by 2D PDEs. Instead of a moving water domain in three
space dimensions, we get a horizontal 2D domain with an unknown function
for the surface elevation and the water depth as a variable coefficient
in the PDEs.

Let :math:`\eta(x,y,t)` be the elevation of
the water surface, :math:`H(x,y)` the water depth corresponding to a flat
surface (:math:`\eta =0`), :math:`u(x,y,t)` and :math:`v(x,y,t)` the
depth-averaged horizontal velocities of the water. Mass and momentum
balance of the water volume give rise to the PDEs involving these
quantities:

.. _Eq:wave:app:sw:2D:eeq:

.. math::

    \tag{230}
    \eta_t = - (Hu)_x - (Hv)_x
        
        

.. _Eq:wave:app:sw:2D:ueq:

.. math::

    \tag{231}
    u_t = -g\eta_x,
        
        

.. _Eq:wave:app:sw:2D:veq:

.. math::

    \tag{232}
    v_t = -g\eta_y,
        
        

where :math:`g` is the acceleration of gravity. Equation :ref:`(230) <Eq:wave:app:sw:2D:eeq>`
corresponds to mass balance while the other two are derived from momentum
balance (Newton's second law).

The initial conditions associated with
:ref:`(230) <Eq:wave:app:sw:2D:eeq>`-:ref:`(232) <Eq:wave:app:sw:2D:veq>` are :math:`\eta`, :math:`u`,
and :math:`v` prescribed at :math:`t=0`. A common condition is to have some water
elevation :math:`\eta =I(x,y)` and assume that the surface is at rest:
:math:`u=v=0`. A subsea earthquake usually means a sufficiently rapid motion
of the bottom and the water volume to say that the bottom
deformation is mirrored at the water surface as an initial lift :math:`I(x,y)`
and that :math:`u=v=0`.

Boundary conditions may be :math:`\eta` prescribed for incoming, known
waves, or zero normal velocity at reflecting boundaries (steep
mountains, for instance): :math:`un_x + vn_y =0`, where :math:`(n_x,n_y)` is the
outward unit normal to the boundary.  More sophisticated boundary
conditions are needed when waves run up at the shore, and at open
boundaries where we want the waves to leave the computational domain
undisturbed.

Equations :ref:`(230) <Eq:wave:app:sw:2D:eeq>`, :ref:`(231) <Eq:wave:app:sw:2D:ueq>`, and
:ref:`(232) <Eq:wave:app:sw:2D:veq>` can be transformed to a standard, linear
wave equation. First, multiply :ref:`(231) <Eq:wave:app:sw:2D:ueq>` and
:ref:`(232) <Eq:wave:app:sw:2D:veq>` by :math:`H`, differentiate :ref:`(231) <Eq:wave:app:sw:2D:ueq>`)
with respect to :math:`x` and :ref:`(232) <Eq:wave:app:sw:2D:veq>` with respect to :math:`y`.
Second, differentiate :ref:`(230) <Eq:wave:app:sw:2D:eeq>` with respect to :math:`t`
and use that :math:`(Hu)_{xt}=(Hu_t)_x` and :math:`(Hv)_{yt}=(Hv_t)_y` when :math:`H`
is independent of :math:`t`. Third, eliminate :math:`(Hu_t)_x` and :math:`(Hv_t)_y`
with the aid of the other two differentiated equations. These manipulations
results in a standard, linear wave equation for :math:`\eta`:

.. _Eq:wave:app:sw:2D:eta:2ndoeq:

.. math::

    \tag{233}
    \eta_{tt} = (gH\eta_x)_x + (gH\eta_y)_y = \nabla\cdot (gH\nabla\eta)
        
        \tp
        

In the case we have an initial non-flat water surface at rest, the
initial conditions become :math:`\eta =I(x,y)` and :math:`\eta_t=0`.
The latter follows from :ref:`(230) <Eq:wave:app:sw:2D:eeq>` if :math:`u=v=0`, or
simply from the fact that the vertical velocity of the surface
is :math:`\eta_t`, which is zero for a surface at rest.

The system :ref:`(230) <Eq:wave:app:sw:2D:eeq>`-:ref:`(232) <Eq:wave:app:sw:2D:veq>`
can be extended to handle a time-varying bottom topography, which is
relevant for modeling long waves generated by underwater slides.
In such cases the water depth function :math:`H` is also a function of :math:`t`,
due to the moving slide,
and one must add a time-derivative term :math:`H_t` to the left-hand side
of :ref:`(230) <Eq:wave:app:sw:2D:eeq>`. A moving bottom is best described by
introducing :math:`z=H_0` as the still-water level, :math:`z=B(x,y,t)` as
the time- and space-varying bottom topography, so that :math:`H=H_0-B(x,y,t)`.
In the elimination of :math:`u` and :math:`v` one may assume that the dependence of
:math:`H` on :math:`t` can be neglected in the terms :math:`(Hu)_{xt}` and :math:`(Hv)_{yt}`.
We then end up with a source term in :ref:`(233) <Eq:wave:app:sw:2D:eta:2ndoeq>`,
because of the moving (accelerating) bottom:

.. _Eq:wave:app:sw:2D:eta:2ndoeq:Ht:

.. math::

    \tag{234}
    \eta_{tt} = \nabla\cdot(gH\nabla\eta) + B_{tt}
        
        \tp
        

The reduction of :ref:`(234) <Eq:wave:app:sw:2D:eta:2ndoeq:Ht>` to 1D, for long waves
in a straight channel, or for approximately plane waves in the ocean, is
trivial by assuming no change in :math:`y` direction (:math:`\partial/\partial y=0`):

.. _Eq:wave:app:sw:1D:eta:2ndoeq:Ht:

.. math::

    \tag{235}
    \eta_{tt} = (gH\eta_x)_x + B_{tt}
        
        \tp
        

Wind drag on the surface
~~~~~~~~~~~~~~~~~~~~~~~~

Surface waves are influenced by the drag of the wind, and if the
wind velocity some meters above the surface is :math:`(U,V)`,
the wind drag gives contributions
:math:`C_V\sqrt{U^2+V^2}U` and :math:`C_V\sqrt{U^2+V^2}V` to
:ref:`(231) <Eq:wave:app:sw:2D:ueq>` and :ref:`(232) <Eq:wave:app:sw:2D:veq>`, respectively,
on the right-hand sides.

Bottom drag
~~~~~~~~~~~

The waves will experience a drag from the bottom, often roughly modeled
by a term similar to the wind drag:
:math:`C_B\sqrt{u^2+v^2}u` on the right-hand side of :ref:`(231) <Eq:wave:app:sw:2D:ueq>` and
:math:`C_B\sqrt{u^2+v^2}v` on the right-hand side of :ref:`(232) <Eq:wave:app:sw:2D:veq>`.
Note that in this case the PDEs :ref:`(231) <Eq:wave:app:sw:2D:ueq>` and
:ref:`(232) <Eq:wave:app:sw:2D:veq>` become nonlinear and the elimination of :math:`u` and :math:`v`
to arrive at a 2nd-order wave equation for :math:`\eta` is not possible anymore.

Effect of the Earth's rotation
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Long geophysical waves will often be affected by the rotation of the
Earth because of the Coriolis force. This force gives rise to a
term :math:`fv` on the right-hand side of :ref:`(231) <Eq:wave:app:sw:2D:ueq>` and
:math:`-fu` on the right-hand side of :ref:`(232) <Eq:wave:app:sw:2D:veq>`.
Also in this case one cannot eliminate :math:`u` and :math:`v` to work with a single
equation for :math:`\eta`. The Coriolis parameter is :math:`f=2\Omega\sin\phi`,
where :math:`\Omega` is the angular velocity of the earth and :math:`\phi` is
the latitude.

.. _wave:app:blood:

Waves in blood vessels
----------------------

The flow of blood in our bodies is basically fluid flow in
a network of pipes. Unlike rigid pipes, the walls in the
blood vessels are elastic and will increase their diameter when the
pressure rises. The elastic forces will then push the wall back
and accelerate the fluid. This interaction between the flow of blood
and the deformation of the vessel wall results in waves traveling along
our blood vessels.

A model for one-dimensional waves along blood vessels can be derived
from averaging the fluid flow over the cross section of the blood
vessels. Let :math:`x` be a coordinate along the blood vessel and assume
that all cross sections are circular, though with different radii :math:`R(x,t)`.
The main quantities to compute is the cross section
area :math:`A(x,t)`, the averaged pressure :math:`P(x,t)`, and the total volume
flux :math:`Q(x,t)`.
The area of this cross section
is

.. _Eq:_auto78:

.. math::

    \tag{236}
    A(x,t) = 2\pi\int_{0}^{R(x,t)} rdr,
        
        

Let :math:`v_x(x,t)` be the velocity of blood averaged over
the cross section at point :math:`x`. The volume flux,
being the total volume of blood passing a cross section per time unit,
becomes

.. _Eq:_auto79:

.. math::

    \tag{237}
    Q(x,t) = A(x,t)v_x(x,t)
        \thinspace
        
        

Mass balance and Newton's second law lead to the PDEs

.. _Eq:wave:app:blood:cont:

.. math::

    \tag{238}
    \frac{\partial A}{\partial t} + \frac{\partial Q}{\partial x} = 0,
        
        

.. _Eq:wave:app:blood:mom:

.. math::

    \tag{239}
    \frac{\partial Q}{\partial t} +
        \frac{\gamma+2}{\gamma + 1}
        \frac{\partial}{\partial x}\left(\frac{Q^2}{A}\right)
        + \frac{A}{\varrho}\frac{\partial P}{\partial x}
        = -2\pi (\gamma + 2)\frac{\mu}{\varrho}\frac{Q}{A},
        
        

where :math:`\gamma` is a parameter related to the velocity profile,
:math:`\varrho` is the density of blood, and :math:`\mu` is the dynamic viscosity
of blood.

We have three unknowns :math:`A`, :math:`Q`, and :math:`P`, and two equations
:ref:`(238) <Eq:wave:app:blood:cont>` and :ref:`(239) <Eq:wave:app:blood:mom>`.
A third equation is needed to relate the flow to
the deformations of the wall. A common form for this equation is

.. _Eq:wave:app:blood:const:

.. math::

    \tag{240}
    \frac{\partial P}{\partial t} + \frac{1}{C}
        \frac{\partial Q}{\partial x} =0,
        
        

where :math:`C` is the compliance of the wall, given by the constitutive
relation

.. _Eq:_auto80:

.. math::

    \tag{241}
    C = \frac{\partial A}{\partial P} + \frac{\partial A}{\partial t},
        
        

which require a relationship between :math:`A` and :math:`P`. One common model
is to view the vessel wall, locally, as a thin elastic tube subject to an
internal pressure. This gives the relation

.. math::
         P=P_0 + \frac{\pi h E}{(1-\nu^2)A_0}(\sqrt{A} - \sqrt{A_0}),
        

where :math:`P_0` and :math:`A_0` are corresponding reference values when the
wall is not deformed, :math:`h` is the
thickness of the wall, and :math:`E` and :math:`\nu` are Young's modulus and
Poisson's ratio of the elastic material in the wall.
The derivative becomes

.. _Eq:_auto81:

.. math::

    \tag{242}
    C = \frac{\partial A}{\partial P} =
        \frac{2(1-\nu^2)A_0}{\pi h E}\sqrt{A_0} +
        2\left(\frac{(1-\nu^2)A_0}{\pi h E}\right)^2(P-P_0)
        \tp
        
        

Another (nonlinear) deformation model of the wall, which has a better
fit with experiments, is

.. math::
         P = P_0\exp{(\beta (A/A_0 - 1))},

where :math:`\beta` is some parameter to be estimated. This law leads to

.. _Eq:_auto82:

.. math::

    \tag{243}
    C = \frac{\partial A}{\partial P} = \frac{A_0}{\beta P}
        \tp
        
        

**Reduction to the standard wave equation.**
It is not uncommon to neglect the viscous term on the right-hand side of
:ref:`(239) <Eq:wave:app:blood:mom>` and also the quadratic term
with :math:`Q^2` on the left-hand side. The reduced equations
:ref:`(239) <Eq:wave:app:blood:mom>`
and :ref:`(240) <Eq:wave:app:blood:const>` form a first-order
linear wave equation system:

.. _Eq:_auto83:

.. math::

    \tag{244}
    C\frac{\partial P}{\partial t} = - \frac{\partial Q}{\partial x},
        
        

.. _Eq:_auto84:

.. math::

    \tag{245}
    \frac{\partial Q}{\partial t}
        = - \frac{A}{\varrho}\frac{\partial P}{\partial x}
        \tp
        
        

These can be combined into standard 1D wave equation PDE by differentiating
the first equation with respect :math:`t` and the second with respect to :math:`x`,

.. math::
         \frac{\partial}{\partial t}\left( C\frac{\partial P}{\partial t}
        \right) = \frac{\partial}{\partial x}\left(
        \frac{A}{\varrho}\frac{\partial P}{\partial x}\right),

which can be approximated by

.. _Eq:_auto85:

.. math::

    \tag{246}
    \frac{\partial^2 Q}{\partial t^2} = c^2\frac{\partial^2 Q}{\partial x^2},\quad
        c = \sqrt{\frac{A}{\varrho C}},
        
        

where the :math:`A` and :math:`C` in the expression for :math:`c` are taken as constant
reference values.

.. _wave:app:light:

Electromagnetic waves
---------------------

Light and radio waves are governed by standard wave equations arising
from Maxwell's general equations. When there are no charges and
no currents, as in a vacuum, Maxwell's equations take the form

.. math::
        
        \nabla\cdot\pmb{E} &= 0,\\ 
        \nabla\cdot\pmb{B} &= 0,\\ 
        \nabla\times\pmb{E} &= -\frac{\partial\pmb{B}}{\partial t},\\ 
        \nabla\times\pmb{B} &= \mu_0\epsilon_0\frac{\partial\pmb{E}}{\partial t},
        

where :math:`\epsilon_0=8.854187817620\cdot 10^{-12}` (F/m)
is the permittivity of free space, also known as the
electric constant, and :math:`\mu_0=1.2566370614\cdot 10^{-6}` (H/m)
is the permeability of free space,
also known as the magnetic constant.
Taking the curl of the two last equations and using the
mathematical identity

.. math::
         \nabla\times (\nabla\times \pmb{E}) = \nabla(\nabla \cdot \pmb{E})
        - \nabla^2\pmb{E} = - \nabla^2\pmb{E}\hbox{ when }\nabla\cdot\pmb{E}=0,
        

gives the wave equation governing the electric and magnetic field:

.. _Eq:_auto86:

.. math::

    \tag{247}
    \frac{\partial^2\pmb{E}}{\partial t^2} =
        c^2\nabla^2\pmb{E},
        
        

.. _Eq:_auto87:

.. math::

    \tag{248}
    \frac{\partial^2\pmb{B}}{\partial t^2} =
        c^2\nabla^2\pmb{B},
        
        

with :math:`c=1/\sqrt{\mu_0\epsilon_0}` as the velocity of light.
Each component of :math:`\pmb{E}` and :math:`\pmb{B}` fulfills a wave equation
and can hence be solved independently.

