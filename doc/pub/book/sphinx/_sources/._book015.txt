.. !split

.. _trunc:diffu:

Truncation errors in diffusion equations
========================================

.. _trunc:diffu:1D:

Linear diffusion equation in 1D
-------------------------------

The standard, linear, 1D diffusion equation takes the form

.. _Eq:trunc:diffu:pde1D:

.. math::

    \tag{523}
    \frac{\partial u}{\partial t} = \alpha\frac{\partial^2 u}{\partial x^2} + f(x,t),\quad x\in (0, L),\ t\in (0,T],
        
        

where :math:`\alpha > 0` is the constant diffusion coefficient. A more
compact form of the diffusion equation is :math:`u_t = \alpha u_{xx}+f`.

The spatial derivative in the diffusion equation, :math:`\alpha u_xx`,
is commonly discretized as :math:`[D_x D_xu]^n_i`. The time-derivative,
however, can be treated by a variety of methods.

The Forward Euler scheme in time
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Let us start
with the simple Forward Euler scheme:

.. math::
         [D_t^+ u = \alpha D_xD_x u + f]^n\tp

The truncation error arises as the residual :math:`R` when
inserting the exact solution
:math:`\uex` in the discrete equations:

.. math::
         [D_t^+ \uex = \alpha D_xD_x \uex + f + R]^n_i\tp

Now, using :ref:`(441) <Eq:trunc:table:fd1:fw:eq>`-:ref:`(442) <Eq:trunc:table:fd1:fw>`
and :ref:`(447) <Eq:trunc:table:fd2:center:eq>`-:ref:`(448) <Eq:trunc:table:fd2:center>`,
we can transform the difference operators to derivatives:

.. math::
        
        \uexd{t}(x_i,t_n) &+ \half\uexd{tt}(t_n)\Delta t + \Oof{\Delta t^2}
        = \alpha\uexd{xx}(x_i,t_n) + \\ 
        &\frac{\alpha}{12}\uexd{xxxx}(x_i,t_n)\Delta x^2 + \Oof{\Delta x^4}
        + f(x_i,t_n) + R^n_i\tp
        

The terms :math:`\uexd{t}(x_i,t_n) - \alpha\uexd{xx}(x_i,t_n) - f(x_i,t_n)`
vanish because :math:`\uex` solves the PDE. The truncation error then becomes

.. math::
         R^n_i =
        \half\uexd{tt}(t_n)\Delta t + \Oof{\Delta t^2}
        - \frac{\alpha}{12}\uexd{xxxx}(x_i,t_n)\Delta x^2 + \Oof{\Delta x^4}\tp
        

.. Correction terms in time...backward 2-level discr of u_tt? Implicity anyway

The Crank-Nicolson scheme in time
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The Crank-Nicolson method consists of
using a centered difference for :math:`u_t` and an arithmetic average of
the :math:`u_xx` term:

.. math::
         [D_t u]^{n+\half}_i = \alpha\half([D_xD_x u]^n_i +
        [D_xD_x u]^{n+1}_i + f^{n+\half}_i\tp

The equation for the truncation error is

.. math::
         [D_t \uex]^{n+\half}_i = \alpha\half([D_xD_x \uex]^n_i +
        [D_xD_x \uex]^{n+1}_i) + f^{n+\half}_i + R^{n+\half}_i\tp

To find the truncation error, we start by expressing the arithmetic
average in terms of values at time :math:`t_{n+\half}`. According to
:ref:`(451) <Eq:trunc:table:avg:arith:eq>`-:ref:`(452) <Eq:trunc:table:avg:arith>`,

.. math::
        
        \half([D_xD_x \uex]^n_i + [D_xD_x \uex]^{n+1}_i)
        =
        [D_xD_x\uex]^{n+\half}_i +
        \frac{1}{8}[D_xD_x\uexd{tt}]_i^{n+\half}\Delta t^2
        + \Oof{\Delta t^4}\tp
        

With :ref:`(447) <Eq:trunc:table:fd2:center:eq>`-:ref:`(448) <Eq:trunc:table:fd2:center>`
we can express the difference operator
:math:`D_xD_xu` in terms of a derivative:

.. math::
        
        [D_xD_x\uex]^{n+\half}_i =
        \uexd{xx}(x_i, t_{n+\half})
        + \frac{1}{12}\uexd{xxxx}(x_i, t_{n+\half})\Delta x^2 +
        \Oof{\Delta x^4}\tp
        

The error term from the arithmetic mean is similarly expanded,

.. math::
         \frac{1}{8}[D_xD_x\uexd{tt}]_i^{n+\half}\Delta t^2
        = \frac{1}{8}\uexd{ttxx}(x_i, t_{n+\half})\Delta t^2
        + \Oof{\Delta t^2\Delta x^2}
        

The time derivative is analyzed using
:ref:`(435) <Eq:trunc:table:fd1:center:eq>`-:ref:`(436) <Eq:trunc:table:fd1:center>`:

.. math::
         [D_t u]^{n+\half}_i
        = \uexd{t}(x_i,t_{n+\half}) +
        \frac{1}{24}\uexd{ttt}(x_i,t_{n+\half})\Delta t^2 +
        \Oof{\Delta t^4}\tp
        

Summing up all the contributions and notifying that

.. math::
         \uexd{t}(x_i,t_{n+\half}) =
        \alpha\uexd{xx}(x_i, t_{n+\half})
        + f(x_i,t_{n+\half}),

the truncation error is given by

.. math::
        
        R^{n+\half}_i
        & =
        \frac{1}{8}\uexd{xx}(x_i,t_{n+\half})\Delta t^2 +
        \frac{1}{12}\uexd{xxxx}(x_i, t_{n+\half})\Delta x^2 +\\ 
        &\quad \frac{1}{24}\uexd{ttt}(x_i,t_{n+\half})\Delta t^2 +
        + \Oof{\Delta x^4} + \Oof{\Delta t^4} + \Oof{\Delta t^2\Delta x^2}
        

Linear diffusion equation in 2D/3D
----------------------------------

A nonlinear diffusion equation in 2D
------------------------------------

Exercises          (7)
======================

.. --- begin exercise ---

.. _trunc:exer:theta:avg:

Exercise 58: Truncation error of a weighted mean
------------------------------------------------

Derive the truncation error of the weighted mean in
:ref:`(449) <Eq:trunc:table:avg:theta:eq>`-:ref:`(450) <Eq:trunc:table:avg:theta>`.

.. --- begin hint in exercise ---

**Hint.**
Expand :math:`\uex^{n+1}` and :math:`\uex^n` around :math:`t_{n+\theta}`.

.. --- end hint in exercise ---

Filename: ``trunc_weighted_mean``.

.. --- end exercise ---

.. --- begin exercise ---

.. _trunc:exer:theta:avg2:

Exercise 59: Simulate the error of a weighted mean
--------------------------------------------------

We consider the weighted mean

.. math::
         \uex(t_n) \approx \theta \uex^{n+1} + (1-\theta)\uex^n\tp  

Choose some specific function for :math:`\uex(t)` and compute the error in
this approximation for a sequence of decreasing :math:`\Delta t =
t_{n+1}-t_n` and for :math:`\theta = 0, 0.25, 0.5, 0.75, 1`.  Assuming that
the error equals :math:`C\Delta t^r`, for some constants :math:`C` and :math:`r`,
compute :math:`r` for the two smallest :math:`\Delta t` values for each choice of
:math:`\theta` and compare with the truncation error
:ref:`(449) <Eq:trunc:table:avg:theta:eq>`-:ref:`(450) <Eq:trunc:table:avg:theta>`.
Filename: ``trunc_theta_avg``.

.. --- end exercise ---

.. --- begin exercise ---

.. _trunc:exer:decay:bw2:

Exercise 60: Verify a truncation error formula
----------------------------------------------

Set up a numerical experiment as explained in
the section :ref:`trunc:decay:estimate:R` for verifying the formulas
:ref:`(445) <Eq:trunc:table:fd1:bw2:eq>`-:ref:`(446) <Eq:trunc:table:fd1:bw2>`.
Filename: ``trunc_backward_2level``.

.. --- end exercise ---

.. --- begin exercise ---

.. _trunc:exer:decay:BE:

Exercise 61: Truncation error of the Backward Euler scheme
----------------------------------------------------------

Derive the truncation error of the Backward Euler scheme for
the decay ODE :math:`u'=-au` with constant :math:`a`. Extend the analysis to
cover the variable-coefficient case :math:`u'=-a(t)u + b(t)`.
Filename: ``trunc_decay_BE``.

.. --- end exercise ---

.. --- begin exercise ---

.. _trunc:exer:decay:estimate:

Exercise 62: Empirical estimation of truncation errors
------------------------------------------------------

Use the ideas and tools from the section :ref:`trunc:decay:estimate:R` to
estimate the rate of the truncation error of the Backward Euler
and Crank-Nicolson schemes applied to the exponential decay
model :math:`u'=-au`, :math:`u(0)=I`.

.. --- begin hint in exercise ---

**Hint.**
In the Backward Euler scheme, the truncation error can be estimated
at mesh points :math:`n=1,\ldots,N`, while the truncation error must
be estimated at midpoints :math:`t_{n+\half}`, :math:`n=0,\ldots,N-1` for
the Crank-Nicolson scheme. The ``truncation_error(dt, N)``
function to be supplied to the ``estimate`` function needs to
carefully implement these details and return the right ``t`` array
such that ``t[i]`` is the time point corresponding to the quantities
``R[i]`` and ``R_a[i]``.

.. --- end hint in exercise ---

Filename: ``trunc_decay_BNCN``.

.. --- end exercise ---

.. --- begin exercise ---

.. _trunc:exer:decay:corr:BE:

Exercise 63: Correction term for a Backward Euler scheme
--------------------------------------------------------

Consider the model :math:`u'=-au`, :math:`u(0)=I`. Use the ideas of
the section :ref:`trunc:decay:corr` to add a correction term to the ODE
such that the Backward Euler scheme applied to the perturbed ODE
problem is of second order in :math:`\Delta t`. Find the amplification
factor.
Filename: ``trunc_decay_BE_corr``.

.. with u''=a^u, the BE scheme probably leads to a 2nd-order Pade

.. approximation of exp(-p)

.. --- end exercise ---

.. --- begin exercise ---

.. _trunc:exer:decay:corr:verify:

Exercise 64: Verify the effect of correction terms
--------------------------------------------------

The program `decay_convrate.py <http://tinyurl.com/nm5587k/decay/decay_convrate.py>`__
solves :math:`u'=-au`, :math:`u(0)=I`, by the :math:`\theta`-rule and computes
convergence rates. Copy this file and
adjust :math:`a` in the ``solver`` function such that it incorporates
correction terms. Run the program to verify that the error from the Forward
and Backward Euler schemes with perturbed :math:`a` is
:math:`\Oof{\Delta t^2}`, while the error arising from the Crank-Nicolson
scheme with perturbed :math:`a` is :math:`\Oof{\Delta t^4}`.
Filename: ``trunc_decay_corr_verify``.

.. --- end exercise ---

.. --- begin exercise ---

.. _trunc:exer:decay:varcoeff:CN:

Exercise 65: Truncation error of the Crank-Nicolson scheme
----------------------------------------------------------

The variable-coefficient ODE :math:`u'=-a(t)u+b(t)` can be discretized
in two different ways by the Crank-Nicolson scheme, depending on
whether we use averages for :math:`a` and :math:`b` or compute them at
the midpoint :math:`t_{n+\half}`:

.. _Eq:_auto156:

.. math::

    \tag{524}
    \lbrack D_t u   = -a\overline{u}^t + b \rbrack^{n+\half},
        
        

.. _Eq:_auto157:

.. math::

    \tag{525}
    \lbrack D_t u   = \overline{-au+b}^t \rbrack^{n+\half}
        \tp
        
        

Compute the truncation error in both cases.
Filename: ``trunc_decay_CN_vc``.

.. --- end exercise ---

.. --- begin exercise ---

.. _trunc:exer:decay:nonlin:BEFE:

Exercise 66: Truncation error of :math:`u'=f(u,t)`
--------------------------------------------------

Consider the general nonlinear first-order scalar ODE

.. math::
         u'(t) = f(u(t), t)
        \tp
        

Show that the truncation error in the Forward Euler scheme,

.. math::
         [D_t^+ u = f(u,t)]^n,

and in the Backward Euler scheme,

.. math::
         [D_t^- u = f(u,t)]^n,

both are of first order, regardless of what :math:`f` is.

Showing the order of the truncation error in the Crank-Nicolson scheme,

.. math::
         [D_t u = f(u,t)]^{n+\half}, 

is somewhat more involved: Taylor expand :math:`\uex^n`, :math:`\uex^{n+1}`,
:math:`f(\uex^n, t_n)`, and :math:`f(\uex^{n+1}, t_{n+1})` around :math:`t_{n+\half}`,
and use that

.. math::
         \frac{df}{dt} = \frac{\partial f}{\partial u}u' + \frac{\partial f}{\partial t}
        \tp  

Check that the derived truncation error is consistent with previous
results for the case :math:`f(u,t)=-au`.
Filename: ``trunc_nonlinear_ODE``.

.. --- end exercise ---

.. --- begin exercise ---

.. _trunc:exer:DtDtu:

Exercise 67: Truncation error of :math:`[D_t D_tu]^n`
-----------------------------------------------------

Derive the truncation error of the finite difference approximation
:ref:`(447) <Eq:trunc:table:fd2:center:eq>`-:ref:`(448) <Eq:trunc:table:fd2:center>` to
the second-order derivative.
Filename: ``trunc_d2u``.

.. --- end exercise ---

.. --- begin exercise ---

.. _trunc:exer:vib:ic:fw:

Exercise 68: Investigate the impact of approximating :math:`u'(0)`
------------------------------------------------------------------

The section :ref:`trunc:vib:undamped` describes two ways of discretizing
the initial condition :math:`u'(0)=V` for a vibration model
:math:`u''+\omega^2u=0`: a centered difference :math:`[D_{2t}u=V]^0` or
a forward difference :math:`[D_t^+u=V]^0`.
The program `vib_undamped.py <http://tinyurl.com/nm5587k/vib/vib_undamped.py>`__
solves :math:`u''+\omega^2u=0` with :math:`[D_{2t}u=0]^0` and features
a function ``convergence_rates`` for computing the order of the
error in the numerical solution. Modify this program such
that it applies the forward difference :math:`[D_t^+u=0]^0` and
report how this simpler and more convenient approximation impacts
the overall convergence rate of the scheme.
Filename: ``trunc_vib_ic_fw``.

.. --- end exercise ---

.. --- begin exercise ---

.. _trunc:exer:vib:fbw:

Exercise 69: Investigate the accuracy of a simplified scheme
------------------------------------------------------------

Consider the ODE

.. math::
         mu'' + \beta |u'|u' + s(u) = F(t)\tp

The term :math:`|u'|u'` quickly gives rise to nonlinearities and complicates
the scheme. Why not simply apply a backward difference to this term
such that it only involves known values? That is, we propose to solve

.. math::
         [mD_tD_tu + \beta |D_t^-u|D_t^-u + s(u) = F]^n\tp

Drop the absolute value for simplicity and find the truncation error
of the scheme.
Perform numerical experiments with the scheme and compared with the one
based on centered differences. Can you illustrate the accuracy loss
visually in real computations, or is the asymptotic analysis here
mainly of theoretical interest?
Filename: ``trunc_vib_bw_damping``.

.. --- end exercise ---

