

.. |nbsp| unicode:: 0xA0
   :trim:

.. !split

.. _decay:app:

Models
%%%%%%

This chapter presents many mathematical models that all end up with
ODEs of the type :math:`u^{\prime}=-au+b`.  The applications are taken from
biology, finance, and physics, and cover population growth or decay,
interacting predator-pray populations, compound interest and
inflation, radioactive decay, chemical and biochemical reaction,
spreading of diseases, cooling of objects, compaction of geological
media, pressure variations in the atmosphere, viscoelastic response in
materials, and air resistance on falling or rising bodies.

Before we turn to the applications, however, we take a brief look at
the technique of scaling, which is so useful in many applications.

.. _decay:app:scaling:

Scaling  (1)
============

Real applications of a model :math:`u^{\prime}=-au+b` will often involve a lot
of parameters in the expressions for :math:`a` and :math:`b`. It can be quite
a challenge to find relevant values of all parameters. In simple
problems, however, it turns out that it is not always necessary
to estimate all parameters because we can lump them into one or
a few *dimensionless* numbers by using a very attractive technique
called scaling. It simply means to stretch the :math:`u` and :math:`t` axis
in the present problem - and suddenly all parameters in the problem
are lumped into one parameter if :math:`b\neq 0` and no parameter when :math:`b=0`!

Dimensionless variables
-----------------------

Scaling means that we introduce a new function :math:`\bar u(\bar t)`,
with

.. math::
         \bar u = \frac{u - u_m}{u_c},\quad \bar t = \frac{t}{t_c},

where :math:`u_m` is a characteristic value of :math:`u`, :math:`u_c` is a characteristic
size of the range of :math:`u` values, and :math:`t_c` is a characteristic
size of the range of :math:`t` where :math:`u` shows significant variation.
Choosing :math:`u_m`, :math:`u_c`, and :math:`t_c` is not always easy and is often an art
in complicated problems. We just state one choice first:

.. math::
         u_c = I,\quad u_m = b/a,\quad t_c = 1/a{\thinspace .}

Inserting :math:`u=u_m + u_c\bar u` and :math:`t=t_c\bar t` in the problem
:math:`u^{\prime}=-au + b`, assuming :math:`a` and :math:`b` are constants, results (after some
algebra) in the *scaled problem*

.. math::
         \frac{d\bar u}{d\bar t} = -\bar u,\quad \bar u(0)=1 - \beta,

where

.. math::
         \beta = \frac{b}{Ia}{\thinspace .}

Dimensionless numbers
---------------------

The parameter :math:`\beta` is a dimensionless number. From the equation we
see that :math:`b` must have the same unit as the term :math:`au`. The initial
condition :math:`I` must have the same unit as :math:`u`, so :math:`Ia` has the same
unit as :math:`b`, making the fraction :math:`b/(Ia)` dimensionless.

An important observation is that :math:`\bar u` depends on :math:`\bar t`
and :math:`\beta`.
That is, only the special combination of :math:`b/(Ia)` matters, not what
the individual values of :math:`b`, :math:`a`, and :math:`I` are. The original unscaled
function :math:`u` depends on :math:`t`, :math:`b`, :math:`a`, and :math:`I`.

A second observation is striking: if :math:`b=0`, the scaled problem is
independent of :math:`a` and :math:`I`! In practice this means that we can perform
a single numerical simulation of the scaled problem and recover the
solution of any problem for a given :math:`a` and :math:`I` by stretching the axis
in the plot: :math:`u=I\bar u` and :math:`t =\bar t/a`.  For :math:`b\neq 0`, we
simulate the scaled problem for a few :math:`\beta` values and recover the
physical solution :math:`u` by translating and stretching the :math:`u` axis and
stretching the :math:`t` axis.

In general, scaling combines the parameters in a problem to a set
of dimensionless parameters. The number of dimensionless parameters is
usually much smaller than the number of original parameters.
The section :ref:`decay:app:drag` presents an example where 11 parameters
are reduced to one!

A scaling for vanishing initial condition
-----------------------------------------

The scaling breaks down if :math:`I=0`. In that case we may choose :math:`u_m=0`,
:math:`u_c=b/a`, and :math:`t_c=1/b`, resulting in a slightly different scaled problem:

.. math::
         \frac{d\bar u}{d\bar t} = 1 -\bar u,\quad \bar u(0)=0{\thinspace .}

As with :math:`b=0`, the case :math:`I=0` has a scaled problem with no physical
parameters!

It is common to drop the bars after scaling and write the scaled
problem as :math:`u^{\prime}=-u`, :math:`u(0)=1-\beta`, or :math:`u^{\prime}=1-u`, :math:`u(0)=0`.
Any implementation of the problem :math:`u^{\prime}=-au+b`, :math:`u(0)=I`, can be
reused for the scaled problem by setting :math:`a=1`, :math:`b=0`, and :math:`I=1-\beta`
in the code, if :math:`I\neq 0`, or one sets
:math:`a=1`, :math:`b=1`, and :math:`I=0` when the physical :math:`I` is zero.
Falling bodies in fluids, as described in the section :ref:`decay:app:drag`,
involves :math:`u^{\prime}=-au+b` with seven physical parameters. All these vanish
in the scaled version of the problem if we start the motion from rest!

Many more details about scaling is presented in the author's book
*Scaling of Differential Equations* [Ref09]_.

.. _decay:app:pop:

Evolution of a population
=========================

.. index:: population dynamics

.. _decay:app:pop:exp:

Exponential growth
------------------

Let :math:`N` be the number of individuals in a population occupying some
spatial domain.  Despite :math:`N` being an integer in this problem, we
shall compute with :math:`N` as a real number and view :math:`N(t)` as a
continuous function of time.  The basic model assumption is that in a
time interval :math:`\Delta t` the number of newcomers to the populations
(newborns) is proportional to :math:`N`, with proportionality constant :math:`\bar
b`. The amount of newcomers will increase the population and result in

.. math::
         N(t+\Delta t) = N(t) + \bar bN(t){\thinspace .}  

It is obvious that a long time interval :math:`\Delta t` will result in
more newcomers and hence a larger :math:`\bar b`. Therefore, we introduce
:math:`b=\bar b/\Delta t`: the number of newcomers per unit time and per
individual. We must then multiply :math:`b` by the length of the time
interval considered and by the population size to get the
total number of new individuals, :math:`b\Delta t N`.

If the number of removals from the population (deaths) is also
proportional to :math:`N`, with proportionality constant :math:`d\Delta t`,
the population evolves according to

.. math::
         N(t+\Delta t) = N(t) + b\Delta t N(t) - d\Delta t N(t){\thinspace .}  

Dividing by :math:`\Delta t` and letting :math:`\Delta t \rightarrow 0`,
we get the ODE

.. math::
        
        N^{\prime} = (b-d)N,\quad N(0)=N_0{\thinspace .}
        

In a population where the death rate (:math:`d`) is larger than
then newborn rate (:math:`b`), :math:`b-d < 0`, and the population experiences
exponential decay rather than exponential growth.

In some populations there is an immigration of individuals into the
spatial domain. With :math:`I` individuals coming in per time unit,
the equation for the population change becomes

.. math::
         N(t+\Delta t) = N(t) + b\Delta t N(t) - d\Delta t N(t) + \Delta t I{\thinspace .}  

The corresponding ODE reads

.. math::
        
        N^{\prime} = (b-d)N + I,\quad N(0)=N_0
        {\thinspace .}
        

Emigration is also modeled by this :math:`I` term if we just change its sign: :math:`I < 0`.
So, the :math:`I` term models migration in and out of the domain in general.

Some simplification arises if we introduce a fractional measure
of the population: :math:`u=N/N_0` and set :math:`r=b-d`. The ODE problem
now becomes

.. _Eq:decay:app:pop:ueq:

.. math::
   :label: decay:app:pop:ueq
        
        u^{\prime} = ru + f,\quad u(0)=1,
        
        

where :math:`f=I/N_0` measures the net immigration per time unit as
the fraction of the initial population. Very often, :math:`r` is approximately
constant, but :math:`f` is usually a function of time.

.. _decay:app:pop:log:

Logistic growth
---------------

.. index:: logistic model

The growth rate :math:`r` of a population decreases if the environment
has limited resources. Suppose the environment can sustain at
most :math:`N_{\max}` individuals. We may then assume that the growth rate
approaches zero as :math:`N` approaches :math:`N_{\max}`, i.e., as :math:`u` approaches
:math:`M=N_{\max}/N_0`. The simplest possible evolution of :math:`r` is then a
linear function: :math:`r(t)={\varrho}(1-u(t)/M)`, where :math:`\varrho`
is the initial growth rate when the population is small relative to the
maximum size and there is enough resources. Using this :math:`r(t)` in
:eq:`decay:app:pop:ueq` results in the *logistic model* for the
evolution of a population (assuming for the moment that :math:`f=0`):

.. _Eq:decay:app:pop:logistic:

.. math::
   :label: decay:app:pop:logistic
        
        u^{\prime} = {\varrho}(1-u/M)u,\quad u(0)=1
        {\thinspace .}
        
        

Initially, :math:`u` will grow at rate :math:`\varrho`, but the growth will decay
as :math:`u` approaches :math:`M`, and then there is no more change in :math:`u`, causing
:math:`u\rightarrow M` as :math:`t\rightarrow\infty`.
Note that the logistic equation :math:`u^{\prime}={\varrho}(1-u/M)u` is *nonlinear* because
of the quadratic term :math:`-u^2{\varrho}/M`.

.. _decay:app:interest:

Compound interest and inflation
===============================

Say the annual interest rate is :math:`r` percent and that the bank
adds the interest once a year to your investment.
If :math:`u^n` is the investment in year :math:`n`, the investment in year :math:`u^{n+1}`
grows to

.. math::
         u^{n+1} = u^n + \frac{r}{100}u^n
        {\thinspace .}  

In reality, the interest rate is added every day. We therefore introduce
a parameter :math:`m` for the number of periods per year when the interest
is added. If :math:`n` counts the periods, we have the fundamental model
for compound interest:

.. _Eq:decay:app:interest:eq1:

.. math::
   :label: decay:app:interest:eq1
        
        u^{n+1} = u^n + \frac{r}{100 m}u^n
        {\thinspace .}
        
        

This model is a *difference equation*, but it can be transformed to a
continuous differential equation through a limit process.
The first step is to derive a formula for the growth of the investment
over a time :math:`t`.
Starting with an investment :math:`u^0`, and assuming that :math:`r` is constant in time,
we get

.. math::
        
        u^{n+1} &= \left(1 + \frac{r}{100 m}\right)u^{n}\\ 
        &= \left(1 + \frac{r}{100 m}\right)^2u^{n-1}\\ 
        &\ \ \vdots\\ 
        &= \left(1 +\frac{r}{100 m}\right)^{n+1}u^{0}
        

Introducing time :math:`t`, which here is a real-numbered counter for years,
we have that :math:`n=mt`, so we can write

.. math::
         u^{mt} = \left(1 + \frac{r}{100 m}\right)^{mt} u^0{\thinspace .}  

The second step is to assume *continuous compounding*, meaning that the
interest is added continuously. This implies :math:`m\rightarrow\infty`, and
in the limit one gets the formula

.. math::
        
        u(t) = u_0e^{rt/100},
        

which is nothing but the solution of the ODE problem

.. _Eq:decay:app:interest:eq2:

.. math::
   :label: decay:app:interest:eq2
        
        u^{\prime} = \frac{r}{100}u,\quad u(0)=u_0
        {\thinspace .}
        
        

This is then taken as the ODE model for compound interest if :math:`r>0`.
However, the reasoning applies equally well to inflation, which is
just the case :math:`r < 0`.
One may also take the :math:`r` in :eq:`decay:app:interest:eq2`
as the net growth of an investment, where :math:`r` takes both compound interest
and inflation into account. Note that for real applications we must
use a time-dependent :math:`r` in :eq:`decay:app:interest:eq2`.

Introducing :math:`a=\frac{r}{100}`, continuous inflation of an initial
fortune :math:`I` is then
a process exhibiting exponential decay according to

.. math::
         u^{\prime} = -au,\quad u(0)=I{\thinspace .}  

.. _decay:app:Newton:cooling:

Newton's law of cooling
=======================

.. `<http://web.bham.ac.uk/winterhs/Newton.htm>`_

.. I. Newton, Scala Graduum Caloris, Philosophical Transactions of the Royal Society of London, 1701

.. explanation: `<http://www.madsci.org/posts/archives/2000-11/973522810.Ph.r.html>`_

When a body at some temperature is placed in a cooling environment,
experience shows that the temperature falls rapidly in the beginning,
and then the change in temperature levels off until the body's
temperature equals that of the surroundings. Newton carried out some
experiments on cooling hot iron and found that the temperature
evolved as a "geometric progression at times in arithmetic progression",
meaning that the temperature decayed exponentially.
Later, this result was formulated as a differential equation:
the rate of change of the temperature in a body is proportional to
the temperature difference between the body and its surroundings.
This statement is known as *Newton's law of cooling*, which
mathematically can be expressed as

.. _Eq:decay:Newton:cooling:

.. math::
   :label: decay:Newton:cooling
        
        {dT\over dt} = -k(T-T_s),
        
        

where :math:`T` is the temperature of the body, :math:`T_s` is the temperature
of the surroundings (which may be time-dependent),
:math:`t` is time, and :math:`k` is a positive constant.
Equation :eq:`decay:Newton:cooling` is primarily viewed as an
empirical law, valid when heat is efficiently convected away
from the surface of the body by a flowing fluid such as air
at constant temperature :math:`T_s`.
The *heat transfer coefficient* :math:`k` reflects the transfer of
heat from the body to
the surroundings and must be determined from physical experiments.

The cooling law :eq:`decay:Newton:cooling` needs an initial
condition :math:`T(0)=T_0`.

.. _decay:app:nuclear:

Radioactive decay
=================

.. index:: radioactive decay

An atomic nucleus of an unstable atom may lose energy by emitting
ionizing particles and thereby be transformed to a nucleus with a
different number of protons and neutrons.  This process is known as
`radioactive decay <http://en.wikipedia.org/wiki/Radioactive_decay>`__.
Actually, the process is stochastic when viewed for a single atom,
because it is impossible to predict exactly when a particular atom
emits a particle. Nevertheless, with a large number of atoms, :math:`N`, one
may view the process as deterministic and compute the mean behavior of
the decay. Below we reason intuitively about an ODE for the mean
behavior. Thereafter, we show mathematically that a detailed stochastic model
for single atoms leads to the same mean behavior.

Deterministic model
-------------------

Suppose at time :math:`t`, the number of the original atom type is :math:`N(t)`.
A basic model assumption is that the transformation of the atoms of the original
type in a small time interval :math:`\Delta t` is proportional to
:math:`N`, so that

.. math::
         N(t+\Delta t) = N(t) - a\Delta t N(t),

where :math:`a>0` is a constant. The proportionality factor is :math:`a\Delta t`, i.e.,
proportional to :math:`\Delta t` since a longer time interval will produce more
transformations.
We can introduce :math:`u=N(t)/N(0)`, divide by
:math:`\Delta t`, and let :math:`\Delta t\rightarrow 0`:

.. math::
         \lim_{r\rightarrow 0}
        N_0\frac{u(t+\Delta t) - u(t)}{\Delta t} = - a N_0 u(t){\thinspace .}

The left-hand side is the derivative of :math:`u`. Dividing by the :math:`N_0` gives
the following ODE for :math:`u`:

.. math::
        
        u^{\prime} = -au,\quad u(0)=1
        {\thinspace .}
        

The parameter :math:`a` can for a given nucleus be expressed through the
*half-life* :math:`t_{1/2}`, which is the time taken for the decay to reduce the
initial amount by one half, i.e., :math:`u(t_{1/2}) = 0.5`.
With :math:`u(t)=e^{-at}`, we get :math:`t_{1/2}=a^{-1}\ln 2` or :math:`a=\ln 2/t_{1/2}`.

.. `<http://en.wikipedia.org/wiki/Exponential_decay>`_

Stochastic model
----------------

Originally, we have :math:`N_0` atoms. Up to some particular time :math:`t`, each
atom may either have decayed or not. If not, they have "survived".
We want to count how many original
atoms that have survived.
The survival of a single atom at time :math:`t` is a random event. Since there
are only two outcomes, survival or decay, we have a
`Bernoulli trial <http://en.wikipedia.org/wiki/Bernoulli_trial>`__.
Let :math:`p` be the
probability of survival (implying that the probability of decay
is :math:`1-p`). If each atom survives independently of
the others, and the probability of survival is the same for every
atom, we have :math:`N_0` Bernoulli trials, known as
a *binomial experiment* from probability theory.
The probability :math:`P(N)` that :math:`N` out
of the :math:`N_0` atoms have survived at time :math:`t` is then given by the
famous *binomial distribution*

.. math::
         P(N) = \frac{N_0!}{N! (N_0-N)!}p^N (1-p)^{N_0-N}{\thinspace .} 

The mean (or expected) value :math:`{\hbox{E}\lbrack P \rbrack}` of :math:`P(N)` is known to be :math:`N_0p`.

It remains to estimate :math:`p`. Let the interval :math:`[0,t]` be divided into :math:`m`
small subintervals of length :math:`\Delta t`. We make the assumption that
the probability of decay of a single atom in an interval of length :math:`\Delta t`
is :math:`\tilde p`, and that this probability is proportional to :math:`\Delta t`:
:math:`\tilde p = \lambda\Delta t` (it sounds natural that the probability
of decay increases with :math:`\Delta t`). The corresponding probability of survival
is :math:`1-\lambda\Delta t`. Believing that :math:`\lambda` is independent
of time, we have, for each interval of length :math:`\Delta t`,
a Bernoulli trial: the atom either survives or
decays in that interval. Now, :math:`p` should be the probability that the atom
survives in all the intervals, i.e., that we have :math:`m` successful
Bernoulli trials in a row and therefore

.. math::
         p = (1-\lambda\Delta t)^m{\thinspace .}

The expected number of atoms of the original type at time :math:`t` is

.. math::
        
        {\hbox{E}\lbrack P \rbrack} = N_0p = N_0(1-\lambda\Delta t)^m,\quad m=t/\Delta t{\thinspace .}
        

To see the relation between the two types of Bernoulli trials and the
ODE above, we go to the limit :math:`\Delta t\rightarrow 0`, :math:`m\rightarrow\infty`.
It is possible to show that

.. math::
         p = \lim_{m\rightarrow\infty} (1-\lambda\Delta t)^m
        = \lim_{m\rightarrow\infty} \left(1-\lambda\frac{t}{m}\right)^m = e^{-\lambda t}
        

This is the famous exponential waiting time (or arrival time) distribution for a
Poisson process in probability theory (obtained here, as often done, as
the limit of a binomial experiment). The probability of decay, or more
precisely that at least one atom has undergone a transition, is
:math:`1-p= 1-e^{-\lambda t}`. This is the
`exponential distribution <http://en.wikipedia.org/wiki/Exponential_distribution>`__.
The limit means that :math:`m` is very
large, hence :math:`\Delta t` is very small, and :math:`\tilde p=\lambda\Delta t`
is very small since the intensity of the events, :math:`\lambda`, is assumed
finite. This situation corresponds to a very small probability
that an atom will decay in a very short time interval, which is a
reasonable model.
The same model occurs in lots of different applications, e.g.,
when waiting for a taxi, or when finding defects along a rope.

Relation between stochastic and deterministic models
----------------------------------------------------

With :math:`p=e^{-\lambda t}` we get the expected number of original atoms
at :math:`t` as :math:`N_0p=N_0e^{-\lambda t}`, which is exactly the solution of
the ODE model :math:`N^{\prime}=-\lambda N`. This also gives an interpretation
of :math:`a` via :math:`\lambda` or vice versa. Our important finding here
is that the ODE model
captures the mean behavior of the underlying stochastic model. This
is, however, not always the common relation between microscopic stochastic
models and macroscopic "averaged" models.

Also of interest, is that a Forward Euler discretization of
:math:`N^{\prime}=-\lambda N`, :math:`N(0)=N_0`, gives :math:`N^m = N_0(1-\lambda\Delta t)^m`
at time :math:`t_m=m\Delta t`, which is exactly the
expected value of the stochastic experiment with :math:`N_0` atoms
and :math:`m` small intervals of length :math:`\Delta t`, where each atom can
decay with probability :math:`\lambda\Delta t` in an interval.

A fundamental question is how accurate the ODE model is. The underlying
stochastic model fluctuates around its expected value. A measure
of the fluctuations is the standard deviation of the binomial experiment with
:math:`N_0` atoms, which can be shown to be :math:`{\hbox{Std}\lbrack P \rbrack}=\sqrt{N_0p(1-p)}`. Compared
to the size of the expectation, we get
the normalized standard deviation

.. math::
         \frac{\sqrt{{\hbox{Var}\lbrack P \rbrack}}}{{\hbox{E}\lbrack P \rbrack}} = N_0^{-1/2}\sqrt{p^{-1}-1}
        = N_0^{-1/2}\sqrt{(1-e^{-\lambda t})^{-1}-1}\approx
        (N_0\lambda t)^{-1/2},
        

showing that the normalized fluctuations are very small if :math:`N_0` is
very large, which is usually the case.

.. _decay:app:waitingtime:

Generalization of the radioactive decay modeling
------------------------------------------------

The modeling in the section :ref:`decay:app:nuclear` is in fact very
general, despite a focus on a particular physical process. We may
instead of atoms and decay speak about a set of *items*, where each
item can undergo a stochastic *transition* from one state to
another. In the section :ref:`decay:app:kinetics` the item is a molecule and
the transition is a chemical reaction, while in the section :ref:`decay:app:SIR` the item is an ill person and the transition is
recovering from the illness (or an immune person who loses her
immunity).

From the modeling in the section :ref:`decay:app:nuclear` we can establish
a deterministic model for a large number of items and a stochastic
model for an arbitrary number of items, even a single one.
The stochastic model has a parameter :math:`\lambda` reflecting the
probability that a transition takes place in a time interval of
unit length (or equivalently, that the probability is :math:`\lambda\Delta t`
for a transition during a time interval of length :math:`\Delta t`).
The probability of making a transition before time :math:`t` is given by

.. math::
         F(t) = 1- e^{-\lambda t}{\thinspace .}

The corresponding probability density is :math:`f(t)=F'(t)=e^{-\lambda t}`.
The expected value of :math:`F(t)`, i.e., the expected time to transition,
is :math:`\lambda^{-1}`. This interpretation of :math:`\lambda` makes it easy to
measure its value: just carry out a large number of experiments,
measure the time to transition, and take one over the average of these times as
an estimate of :math:`\lambda`.
The variance is :math:`\lambda^{-2}`.

The deterministic model counts how many items, :math:`N(t)`, that have
undergone the transition (on average), and :math:`N(t)` is governed by the ODE

.. math::
         N^{\prime} = -\lambda N(t),\quad N(0)=N_0{\thinspace .}

.. _decay:app:kinetics:

Chemical kinetics
=================

.. index::
   single: chemical reactions; irreversible

Irreversible reaction of two substances
---------------------------------------

Consider two chemical substances, A and B, and a chemical reaction that
turns A into B. In a small time interval, some of the
molecules of type A are transformed into molecules of B. This process is,
from a mathematical modeling point of view, equivalent to the
radioactive decay process described in the previous section. We can
therefore apply the same modeling approach. If :math:`N_A` is the number of
molecules of substance A, we have that :math:`N_A` is governed by the
differential equation

.. math::
         \frac{dN_A}{dt} = -kN_A,

where (the constant) :math:`k` is called the *rate constant* of the reaction.
Rather than using the number of molecules, we use the *concentration*
of molecules: :math:`[A](t) = N_A(t)/N_A(0)`.
We see that :math:`d[A]/dt = N_A(0)^{-1} dN_A/dt`.
Replacing :math:`N_A` by :math:`[A]` in the equation for :math:`N_A` leads to the equation
for the concentration :math:`[A]`:

.. _Eq:decay:app:kinetics:irrev:A:

.. math::
   :label: decay:app:kinetics:irrev:A
        
        \frac{d[A]}{dt} = -k[A],\quad t\in (0,T],\ [A](0)=1, {\thinspace .}
        
        

Since substance A is transformed to substance B, we have that the concentration
of :math:`[B]` grows by the loss of :math:`[A]`:

.. math::
        
        \frac{d[B]}{dt} = k[A],\quad [B](0)=0{\thinspace .}
        

The mathematical model can either be :eq:`decay:app:kinetics:irrev:A` or
the system

.. math::
        
        \frac{d[A]}{dt} = -k[A], t\in (0,T]
        

.. math::
          
        \frac{d[B]}{dt} = k[A], t\in (0,T]
        

.. math::
          
        [A](0) = 1,
        

.. math::
          
        [B](0) = 0{\thinspace .}
        

This reaction is known as a *first-order reaction*, where each molecule of
A makes an independent decision about whether to complete the reaction,
i.e., independent of what happens to any other molecule.

An :math:`n`-th order reaction is modeled by

.. math::
        
        \frac{d[A]}{dt} = -k[A]^n,
        

.. math::
          
        \frac{d[B]}{dt} = k[A]^n,
        

for :math:`t\in (0,T]` with initial conditions :math:`[A](0) = 1` and
:math:`[B](0) = 0`. Here, :math:`n` can be a real number,
but is most often an integer. Note that
the sum of the concentrations is constant since

.. math::
         \frac{d[A]}{dt} + \frac{d[B]}{dt} = 0\quad\Rightarrow\quad
        [A](t) + [B](t) = \hbox{const} = [A](0) + [B](0) = 1 + 0{\thinspace .}

.. index::
   single: chemical reactions; reversible

Reversible reaction of two substances
-------------------------------------

Let the chemical reaction turn substance A into B and substance B into A.
The rate of change of :math:`[A]` has then two contributions: a loss :math:`k_A[A]`
and a gain :math:`k_B[B]`:

.. math::
        
        \frac{d[A]}{dt} = -k_A[A] + k_B[B], \quad t\in (0,T],\ [A](0)=A_0{\thinspace .}
        

Similarly for substance B,

.. math::
        
        \frac{d[B]}{dt} = k_A[A] - k_B[B], \quad t\in (0,T],\ [B](0)=B_0{\thinspace .}
        

This time we have allowed for arbitrary initial concentrations.
Again,

.. math::
         \frac{d[A]}{dt} + \frac{d[B]}{dt} = 0\quad\Rightarrow\quad
        [A](t) + [B](t) = A_0+B_0{\thinspace .}

Irreversible reaction of two substances into a third
----------------------------------------------------

Now we consider two chemical substances, A and B, reacting with each
other and producing a substance C. In a small time interval :math:`\Delta t`,
molecules of type A and B are occasionally colliding, and in some
of the collisions, a chemical reaction occurs, which turns A and B into
a molecule of type C. (More generally, :math:`M_A` molecules of A and :math:`M_B`
molecules of B react to form :math:`M_C` molecules of :math:`C`.)
The number of possible pairings, and thereby collisions, of A and B is
:math:`N_AN_B`, where :math:`N_A` is the number of molecules of A, and :math:`N_B` is the
number of molecules of B.
A fraction :math:`k` of these collisions,
:math:`\hat k\Delta t N_AN_B`, features a chemical reaction and produce
:math:`N_C` molecules of C. The fraction is thought to be proportional to
:math:`\Delta t`: considering a twice as long time interval, twice as many
molecules collide, and twice as many reactions occur.
The increase in molecules of substance C is now found
from the reasoning

.. math::
         N_C(t+\Delta t) = N_C(t) + \hat k\Delta t N_AN_B{\thinspace .}

Dividing by :math:`\Delta t`,

.. math::
         \frac{N_C(t+\Delta t) - N_C(t)}{\Delta t} = \hat k N_AN_B,

and letting :math:`\Delta t\rightarrow 0`, gives the differential equation

.. math::
         \frac{dN_C}{dt} = \hat k N_AN_B{\thinspace .}

(This equation is known as the important `law of mass action <https://en.wikipedia.org/wiki/Law_of_mass_action>`__ discovered by
the Norwegian scientists Cato M. |nbsp| Guldberg and Peter Waage.
A more general form of the right-hand side is :math:`\hat kN_A^{\alpha}N_B^{\beta}`.
All the constants :math:`\hat k`, :math:`\alpha`, and :math:`\beta` must be determined from
experiments.)

Working with concentrations instead, we introduce :math:`[C](t)=N_C(t)/N_C(0)`,
with similar definitions for :math:`[A]` and :math:`[B]` we get

.. math::
        
        \frac{d[C]}{dt} = k [A][B]{\thinspace .}
        

The constant :math:`k` is related to :math:`\hat k` by :math:`k = \hat k N_A(0)N_B(0)/N_C(0)`.
The gain in C is a loss of A and B:

.. math::
        
        \frac{d[A]}{dt} = -k[A][B],
        

.. math::
          
        \frac{d[B]}{dt} = -k[A][B]{\thinspace .}
        

A biochemical reaction
----------------------

A common reaction (known as `Michaelis-Menton kinetics <https://en.wikipedia.org/wiki/Michaelis-Menten_kinetics>`__) turns a substrate S into
a product P with aid of an enzyme E. The reaction is a two-stage process:
first S and E reacts to form a complex ES, where the enzyme and substrate
are bound to each other, and then ES is turned into E and P.
In the first stage, S and E react to produce a growth of ES according
to the law of mass action:

.. math::
        
        \frac{d[S]}{dt} &= - k_+[E][S],\\ 
        \frac{d[ES]}{dt} &= k_+[E][S]{\thinspace .}\\ 
        

The complex ES reacts and produces the product :math:`P` at rate
:math:`-k_{v}[ES]` and E at rate :math:`-k_-[ES]`. The total set of reactions can
then be expressed by

.. _Eq:decay:app:MMK:ES1:

.. math::
   :label: decay:app:MMK:ES1
        
        \frac{d[ES]}{dt} = k_+[E][S] - k_v[ES] - k_-[ES],
        
        

.. _Eq:decay:app:MMK:P1:

.. math::
   :label: decay:app:MMK:P1
          
        \frac{d[P]}{dt} = k_v[ES],
        
        

.. _Eq:decay:app:MMK:S1:

.. math::
   :label: decay:app:MMK:S1
          
        \frac{d[S]}{dt} = -k_+[E][S] + k_-[ES],
        
        

.. _Eq:decay:app:MMK:E1:

.. math::
   :label: decay:app:MMK:E1
          
        \frac{d[E]}{dt} = -k_+[E][S] + k_-[ES] + k_v[ES]{\thinspace .}
        
        

The initial conditions are :math:`[ES](0)=[P](0)=0`, and :math:`[S]=S_0`, :math:`[E]=E_0`.
The constants :math:`k_+`, :math:`k_-`, and :math:`k_v` must be determined from experiments.

.. It is easy to see that :math:`[ES]^{\prime} + [E]^{\prime}=0`, i.e.,

.. :math:`[ES] + [E]= E_0=\hbox{const}`. And :math:`[ES] + [S] + [P]` is constant.

.. Dimensionless Michaelis constant: (k_v + k_-)/k_+

.. _decay:app:SIR:

Spreading of diseases
=====================

The modeling of spreading of diseases is very similar to the modeling
of chemical reactions in the section :ref:`decay:app:kinetics`. The field
of epidemiology speaks about susceptibles: people who can get a disease;
infectives: people who are infected and can infect susceptibles; and
recovered: people who have recovered from the disease and
become immune.
Three categories are accordingly defined: S for susceptibles, I for
infectives, and R for recovered. The number in each category is tracked
by the functions :math:`S(t)`, :math:`I(t)`, and :math:`R(t)`.

To model how many people that get infected in a small time interval
:math:`\Delta t`, we reason as with reactions in the section :ref:`decay:app:kinetics`.
The possible number of parings ("collisions") between susceptibles
and infected is :math:`SI`. A fraction of these, :math:`\beta\Delta t SI`,
will actually meet and the infected succeeds of infecting the susceptible,
where :math:`\beta` is a parameter to be empirically estimated.
This leads to a loss of susceptibles and a gain of infected:

.. math::
        
        S(t+\Delta t) &= S(t) - \beta\Delta tSI,\\ 
        I(t+\Delta t) &= I(t) + \beta\Delta tSI{\thinspace .}
        

In the same time interval, a fraction :math:`\nu\Delta t I`
of the infected is recovered.
It follows from the section :ref:`decay:app:waitingtime`
that the parameter :math:`\nu^{-1}` has the interpretation as the average
waiting time to leave the I category, i.e., the
average length of the disease.
The :math:`\nu \Delta tI` term is a loss for the I category, but a gain for the R
category:

.. math::
        
        I(t+\Delta t) &= I(t) + \beta\Delta tSI - \nu\Delta t I,
        R(t+\Delta t) &= R(t) + \nu\Delta t I{\thinspace .}
        

Dividing these equations by :math:`\Delta t` and going to the limit
:math:`\Delta t\rightarrow 0`, gives the ODE system

.. _Eq:decay:app:SIR:S:

.. math::
   :label: decay:app:SIR:S
        
        \frac{dS}{dt} = -\beta SI,
        
        

.. _Eq:decay:app:SIR:I:

.. math::
   :label: decay:app:SIR:I
          
        \frac{dI}{dt} =  \beta SI - \nu I,
        
        

.. _Eq:decay:app:SIR:R:

.. math::
   :label: decay:app:SIR:R
          
        \frac{dR}{dt} = \nu I,
        
        

with initial values :math:`S(0)=S_0`, :math:`I(0)=I_0`, and :math:`R(0)=0`.
By adding the equations, we realize that

.. math::
         \frac{dS}{dt}+\frac{dI}{dt}+\frac{dR}{dt}=0\quad\Rightarrow\quad
        S+I+R=\hbox{const}=N,

where :math:`N` is the total number in the population under consideration.
This property can be used as a partial verification during simulations.

Equations :eq:`decay:app:SIR:S`-:eq:`decay:app:SIR:R` are known as
the SIR model in epidemiology. The model can easily be extended to
incorporate vaccination programs, loss immunity after some time, etc.
Typical diseases that can be simulated by the SIR model and its variants
are measles, smallpox, flu, plague, and HIV.

.. _decay:app:predpray:

Predator-pray models in ecology
===============================

.. index:: Lotka-Volterra model

.. index:: predator-pray model

A model for the interaction of predator and pray species can be based
on reasoning from population dynamics and the SIR model.
Let :math:`H(t)` be the number of prays in a region, and let :math:`L(t)`
be the number of predators. For example, :math:`H` may be hares and :math:`L` lynx,
or rabbits and foxes.

The population of the pray evolvoes due to births and deaths, exactly
as in a population dynamics model from Section
reff{decay:app:pop:exp}.
During a time interval :math:`\Delta t`
the increase in the population is therefore

.. math::
         H(t+\Delta t) - H(t) =  a\Delta t H(t),

where :math:`a` is a parameter to be measured.
The increase is proportional to :math:`H`, and the proportionality constant
:math:`a\Delta t` is proportional to :math:`\Delta t`, because doubling the
interval will double the increase.

However, the pray population have an additional loss because they
are eaten by predators. All the pray and predator animals can form
:math:`LH` pairs in total (if everybody can meet everybody at random).
A small fraction :math:`b\Delta t`
of such meetings, during a time interval :math:`\Delta t`,
end up with the predator eating the pray. The increase in the pray
population is therefore adjusted to

.. math::
         H(t+\Delta t) - H(t) =  a\Delta t H(t) - b\Delta t H(t)L(t){\thinspace .}

The predator population increases as a result of eating prays.
The amount of eaten prays is :math:`b\Delta t LH`, but only a fraction
:math:`d\Delta t LH` of this amount contributes to increasing the
predator population. In addition, predators die and this loss
is set to :math:`c\Delta t L`. To summarize, the increase in the predator
population is given by

.. math::
         L(t + \Delta t) - L(t) = d\Delta t L(t)H(t) - c\Delta t L(t){\thinspace .}

Dividing by :math:`\Delta t` in the equations for :math:`H` and :math:`L` and letting
:math:`t\rightarrow 0` results in

.. math::
        
        \lim_{\Delta t\rightarrow 0}\frac{H(t+\Delta t)-H(t)}{\Delta t}
        = H^{\prime}(t) &= aH(t) - bL(t)H(t),\\ 
        \lim_{\Delta t\rightarrow 0}\frac{L(t+\Delta t)-L(t)}{\Delta t}
        = L^{\prime}(t) &= dL(t)H(t) - cL(t){\thinspace .}
        

We can simplify the notation to the following two ODEs:

.. _Eq:decay:app:predpray:eqH:

.. math::
   :label: decay:app:predpray:eqH
        
        H^{\prime} = H(a - bL),
        
        

.. _Eq:decay:app:predpray:eqL:

.. math::
   :label: decay:app:predpray:eqL
          
        L^{\prime} = L(dH - c){\thinspace .}
        
        

This is a so-called Lokta-Volterra model. It contains four parameters
that must be estimated: :math:`a`, :math:`b`, :math:`c`, and :math:`d`. In addition, two
initial conditions are needed for :math:`H(0)` and :math:`L(0)`.

.. _decay:app:atm:

Decay of atmospheric pressure with altitude
===========================================

.. The Barometric Formula

.. `<http://en.wikipedia.org/wiki/Barometric_formula>`_

The general model
-----------------

Vertical equilibrium of air in the atmosphere is governed by
the equation

.. _Eq:decay:app:atm:dpdz:

.. math::
   :label: decay:app:atm:dpdz
        
        \frac{dp}{dz} = -\varrho g
        {\thinspace .}
        
        

Here, :math:`p(z)` is the air pressure, :math:`\varrho` is the density of
air, and :math:`g=9.807\hbox{ m/s}^2` is a standard value of
the acceleration of gravity.
(Equation :eq:`decay:app:atm:dpdz` follows directly from the general
Navier-Stokes equations for fluid motion, with
the assumption that the air does not move.)

The pressure is related to density and temperature through the ideal gas law

.. _Eq:decay:app:atm:rho:

.. math::
   :label: decay:app:atm:rho
        
        \varrho = \frac{Mp}{R^*T}, 
        

where :math:`M` is the molar mass of the Earth's air (0.029 kg/mol),
:math:`R^*` is the universal
gas constant (:math:`8.314` Nm/(mol K)), and :math:`T` is the temperature in Kelvin.
All variables :math:`p`, :math:`\varrho`, and :math:`T` vary with the height :math:`z`.
Inserting :eq:`decay:app:atm:rho` in :eq:`decay:app:atm:dpdz` results
in an ODE with a variable coefficient:

.. _Eq:decay:app:atm:ode:

.. math::
   :label: decay:app:atm:ode
        
        \frac{dp}{dz} = -\frac{Mg}{R^*T(z)} p
        
        \thinspace  .
        

Multiple atmospheric layers
---------------------------

The atmosphere can be approximately modeled by seven layers.
In each layer, :eq:`decay:app:atm:ode` is applied with
a linear temperature of the form

.. math::
         T(z) = \bar T_i + L_i(z-h_i),

where :math:`z=h_i` denotes the bottom of layer number :math:`i`,
having temperature :math:`\bar T_i`,
and :math:`L_i` is a constant in layer number :math:`i`. The table below
lists :math:`h_i` (m), :math:`\bar T_i` (K), and :math:`L_i` (K/m) for the layers
:math:`i=0,\ldots,6`.

=========  ===========  ================  ===========  
:math:`i`  :math:`h_i`  :math:`\bar T_i`  :math:`L_i`  
=========  ===========  ================  ===========  
0                    0               288      -0.0065  
1               11,000               216          0.0  
2               20,000               216        0.001  
3               32,000               228       0.0028  
4               47,000               270          0.0  
5               51,000               270      -0.0028  
6               71,000               214       -0.002  
=========  ===========  ================  ===========  

For implementation it might be convenient to write :eq:`decay:app:atm:ode`
on the form

.. math::
        
        \frac{dp}{dz} = -\frac{Mg}{R^*(\bar T(z) + L(z)(z-h(z)))} p,
        

where :math:`\bar T(z)`, :math:`L(z)`, and :math:`h(z)` are piecewise constant
functions with values given in the table.
The value of the pressure at the sea level :math:`z=0`, :math:`p_0=p(0)`, is :math:`101325` Pa.

Simplifications
---------------

Constant layer temperature
~~~~~~~~~~~~~~~~~~~~~~~~~~

One common simplification is to assume that the temperature is
constant within each layer. This means that :math:`L=0`.

One-layer model
~~~~~~~~~~~~~~~

Another commonly used approximation is to work with one layer instead of
seven. This `one-layer model <http://en.wikipedia.org/wiki/Density_of_air>`__
is based on :math:`T(z)=T_0 - Lz`, with
sea level standard temperature :math:`T_0=288` K and
temperature lapse rate :math:`L=0.0065` K/m.

.. _decay:app:sediment:

Compaction of sediments
=======================

Sediments, originally made from materials like sand and mud, get
compacted through geological time by the weight of new material that
is deposited on the sea bottom. The porosity :math:`\phi` of the sediments
tells how much void (fluid) space there is between the sand and
mud grains. The porosity drops with depth, due to the weight of
the sediments above. This makes the void space shrink, and thereby compaction
increases.

A typical assumption is that the change in :math:`\phi` at some depth :math:`z`
is negatively proportional to :math:`\phi`. This assumption leads to
the differential equation problem

.. _Eq:decay:app:sediment:phi:eq:

.. math::
   :label: decay:app:sediment:phi:eq
        
        \frac{d\phi}{dz} = -c\phi,\quad \phi(0)=\phi_0,
        
        

where the :math:`z` axis points downwards, :math:`z=0` is the surface with known
porosity, and :math:`c>0` is a constant.

The upper part of the Earth's crust consists of many geological layers
stacked on top of each other, as indicated in Figure
:ref:`decay:app:sediment:fig:layers`.  The model
:eq:`decay:app:sediment:phi:eq` can be applied for each layer. In
layer number :math:`i`, we have the unknown porosity function :math:`\phi_i(z)`
fulfilling :math:`\phi_i^{\prime}(z)=-c_iz`, since the constant :math:`c` in the model
:eq:`decay:app:sediment:phi:eq` depends on the type of sediment in
the layer. Alternatively, we can use :eq:`decay:app:sediment:phi:eq`
to describe the porosity through all layers if :math:`c` is taken as a
piecewise constant function of :math:`z`, equal to :math:`c_i` in layer :math:`i`.
From the figure we see that new layers of sediments are
deposited on top of older ones as time progresses. The compaction,
as measured by :math:`\phi`, is
rapid in the beginning and then decreases (exponentially) with depth
in each layer.

.. _decay:app:sediment:fig:layers:

.. figure:: Compaction_of_Sediment.png
   :width: 600

   *Illustration of the compaction of geological layers (with different colors) through time*

When we drill a well at present time through the right-most column of
sediments in Figure :ref:`decay:app:sediment:fig:layers`, we can measure
the thickness of the sediment in (say) the bottom layer. Let :math:`L_1` be
this thickness.  Assuming that the volume of sediment remains constant
through time, we have that the initial volume, :math:`\int_0^{L_{1,0}}
\phi_1 dz`, must equal the volume seen today,
:math:`\int_{\ell-L_1}^{\ell}\phi_1 dz`, where :math:`\ell` is the depth of the
bottom of the sediment in the present day configuration.  After having
solved for :math:`\phi_1` as a function of :math:`z`, we can then find the
original thickness :math:`L_{1,0}` of the sediment from the equation

.. math::
         \int_0^{L_{1,0}} \phi_1 dz = \int_{\ell-L_1}^{\ell}\phi_1 dz {\thinspace .} 

In hydrocarbon exploration it is important to know :math:`L_{1,0}` and the
compaction history of the various layers of sediments.

.. _decay:app:drag:

Vertical motion of a body in a viscous fluid
============================================

A body moving vertically through a fluid (liquid or gas) is subject to
three different types of forces: the gravity force, `the drag force <http://en.wikipedia.org/wiki/Drag_(physics)>`__,
and the buoyancy force.

Overview of forces
------------------

Taking the upward direction as positive,
the gravity force is :math:`F_g= -mg`, where :math:`m` is the mass of the body and
:math:`g` is the acceleration of gravity.
The uplift or buoyancy force ("Archimedes force") is :math:`F_b = \varrho gV`,
where :math:`\varrho` is the density of the fluid and
:math:`V` is the volume of the body.

The drag force is of two types, depending on the Reynolds number

.. math::
        
        \hbox{Re} = \frac{\varrho d|v|}{\mu},
        

where :math:`d` is the diameter of the body in
the direction perpendicular to the flow, :math:`v` is the velocity of the
body, and :math:`\mu` is the dynamic viscosity of the fluid.
When :math:`\hbox{Re} < 1`, the drag force is fairly well modeled by
the so-called Stokes' drag,
which for a spherical body of diameter :math:`d` reads

.. math::
        
        F_d^{(S)} = - 3\pi d\mu v
        {\thinspace .}
        

Quantities are taken as positive in the upwards vertical direction, so
if :math:`v>0` and the body moves upwards, the drag force acts downwards and
become negative, in accordance with the minus sign in expression for
:math:`F_d^{(S)}`.

For large Re, typically :math:`\hbox{Re} > 10^3`, the drag force is quadratic
in the velocity:

.. math::
        
        F_d^{(q)} = -{1\over2}C_D\varrho A|v|v,
        

where :math:`C_D` is a dimensionless drag coefficient depending on the body's shape,
and :math:`A` is the cross-sectional area as
produced by a cut plane, perpendicular to the motion, through the thickest
part of the body. The superscripts :math:`\,{}^q` and :math:`\,{}^S` in
:math:`F_d^{(S)}` and :math:`F_d^{(q)}` indicate Stokes drag and quadratic drag,
respectively.

Equation of motion
------------------

All the mentioned forces act in the vertical direction.
Newton's second law of motion applied to the body says that the sum of
these forces must equal the mass of the body times its acceleration
:math:`a` in the vertical direction.

.. math::
         ma = F_g + F_d^{(S)} + F_b {\thinspace .}

Here we have chosen to model the fluid resistance by the Stokes drag.
Inserting the expressions for the forces yields

.. math::
          ma = -mg - 3\pi d\mu v + \varrho gV
        {\thinspace .}
        

The unknowns here are :math:`v` and :math:`a`, i.e., we have two unknowns but only
one equation. From kinematics in physics we know that
the acceleration is the time derivative of the velocity: :math:`a = dv/dt`.
This is our second equation.
We can easily eliminate :math:`a` and get a single differential equation for :math:`v`:

.. math::
         m{dv\over dt} = -mg - 3\pi d\mu v + \varrho gV
        {\thinspace .}
        

A small rewrite of this equation is handy: We express :math:`m` as :math:`\varrho_bV`,
where :math:`\varrho_b` is the density of the body, and we divide by
the mass to get

.. _Eq:decay:app:fallingbody:model:S:

.. math::
   :label: decay:app:fallingbody:model:S
        
        v^{\prime}(t) = - \frac{3\pi d\mu}{\varrho_b V} v + g\left(\frac{\varrho}{\varrho_b} -1\right)
        
        {\thinspace .}
        

We may introduce the constants

.. math::
        
        a = \frac{3\pi d\mu}{\varrho_b V},\quad
        b = g\left(\frac{\varrho}{\varrho_b} -1\right),
        

so that the structure of the differential equation becomes obvious:

.. _Eq:decay:app:fallingbody:gmodel:S:

.. math::
   :label: decay:app:fallingbody:gmodel:S
        
        v^{\prime}(t) = -av(t) + b
        
        {\thinspace .}
        

The corresponding initial condition is :math:`v(0)=v_0` for some prescribed
starting velocity :math:`v_0`.

This derivation can be repeated with the quadratic drag force
:math:`F_d^{(q)}`, leading to the result

.. _Eq:decay:app:fallingbody:model:q:

.. math::
   :label: decay:app:fallingbody:model:q
        
        v^{\prime}(t) =
        -{1\over2}C_D{\varrho A\over\varrho_b V}|v|v +
        g\left({\varrho\over\varrho_b} - 1\right)
        {\thinspace .}
        
        

Defining

.. math::
        
        a = {1\over2}C_D{\varrho A\over\varrho_b V},
        

and :math:`b` as above, we can write :eq:`decay:app:fallingbody:model:q` as

.. _Eq:decay:app:fallingbody:gmodel:q:

.. math::
   :label: decay:app:fallingbody:gmodel:q
        
        v^{\prime}(t) = -a|v|v + b
        {\thinspace .}
        
        

.. index:: terminal velocity

Terminal velocity
-----------------

An interesting aspect of :eq:`decay:app:fallingbody:gmodel:S` and
:eq:`decay:app:fallingbody:gmodel:q` is whether :math:`v` will approach
a final constant value,
the so-called *terminal velocity* :math:`v_T`, as :math:`t\rightarrow\infty`.
A constant :math:`v` means that
:math:`v^{\prime}(t)\rightarrow 0` as :math:`t\rightarrow\infty` and therefore
the terminal velocity :math:`v_T` solves

.. math::
         0 = -av_T + b 

and

.. math::
         0 = -a|v_T|v_T + b{\thinspace .} 

The former equation implies :math:`v_T = b/a`, while the latter has solutions
:math:`v_T =-\sqrt{|b|/a}` for a falling body (:math:`v_T < 0`) and
:math:`v_T = \sqrt{b/a}` for a rising body (:math:`v_T>0`).

A Crank-Nicolson scheme
-----------------------

Both governing equations, the Stokes' drag model
:eq:`decay:app:fallingbody:gmodel:S` and the quadratic drag model
:eq:`decay:app:fallingbody:gmodel:q`, can be readily solved
by the Forward Euler scheme. For higher accuracy one can use
the Crank-Nicolson method, but a straightforward application
of this method gives
a nonlinear equation in the new unknown value :math:`v^{n+1}` when applied to
:eq:`decay:app:fallingbody:gmodel:q`:

.. _Eq:decay:app:fallingbody:gmodel:CN:

.. math::
   :label: decay:app:fallingbody:gmodel:CN
        
        \frac{v^{n+1}-v^n}{\Delta t}
        = -a\frac{1}{2}(|v^{n+1}|v^{n+1} + |v^n|v^n) + b
        
        {\thinspace .}
        

The first term on the right-hand side of :eq:`decay:app:fallingbody:gmodel:CN`
is the arithmetic average of :math:`-|v|v` evaluated at time levels :math:`n` and :math:`n+1`.

Instead of approximating the term :math:`-|v|v` by an arithmetic
average, we can use a *geometric mean*:

.. index:: geometric mean

.. index::
   single: averaging; geometric

.. math::
        
        (|v|v)^{n+\frac{1}{2}} \approx |v^n|v^{n+1}
        {\thinspace .}
        

The error is of second order in :math:`\Delta t`, just as for the arithmetic
average and the centered finite difference approximation in
:eq:`decay:app:fallingbody:gmodel:CN`. With the geometric mean,
the resulting discrete equation

.. math::
        
        \frac{v^{n+1}-v^n}{\Delta t} = - a|v^{n}|v^{n+1} + b
        

becomes a *linear* equation in :math:`v^{n+1}`, and we can
therefore easily solve for :math:`v^{n+1}`:

.. _Eq:decay:app:fallingbody:gmodel:q:CN:

.. math::
   :label: decay:app:fallingbody:gmodel:q:CN
        
        v^{n+1} = \frac{v_n + \Delta t b^{n+\frac{1}{2}}}{1 + \Delta t a^{n+\frac{1}{2}}|v^{n}|}{\thinspace .}
        
        

Using a geometric mean instead of an arithmetic mean in the Crank-Nicolson
scheme is an attractive method for avoiding a nonlinear algebraic
equation when discretizing a nonlinear ODE.

.. Is the error actually of second order for an arbitrary a(u)u term?

Physical data
-------------

Suitable values of :math:`\mu` are :math:`1.8\cdot 10^{-5}\hbox{ Pa}\, \hbox{s}` for air
and :math:`8.9\cdot 10^{-4}\hbox{ Pa}\, \hbox{s}` for water.
Densities can be taken as :math:`1.2\hbox{ kg/m}^3` for air and as
:math:`1.0\cdot 10^3\hbox{ kg/m}^3` for water. For considerable vertical
displacement in the atmosphere one should take into account that
the density of air varies with the altitude, see the section :ref:`decay:app:atm`.
One possible density variation arises from the one-layer model
in the mentioned section.

Any density variation makes :math:`b` time dependent and we need
:math:`b^{n+\frac{1}{2}}` in :eq:`decay:app:fallingbody:gmodel:q:CN`.
To compute the density that enters
:math:`b^{n+\frac{1}{2}}` we must also compute the vertical
position :math:`z(t)` of the body. Since :math:`v=dz/dt`, we can use a centered
difference approximation:

.. math::
         \frac{z^{n+\frac{1}{2}} - z^{n-\frac{1}{2}}}{\Delta t} = v^n
        \quad\Rightarrow\quad z^{n+\frac{1}{2}} = z^{n-\frac{1}{2}}+\Delta t\, v^n{\thinspace .}

This :math:`z^{n+\frac{1}{2}}` is used in the expression for :math:`b`
to compute :math:`\varrho(z^{n+\frac{1}{2}})` and then :math:`b^{n+\frac{1}{2}}`.

The `drag coefficient <http://en.wikipedia.org/wiki/Drag_coefficient>`__ :math:`C_D` depends heavily
on the shape of the body.  Some values are: 0.45 for a sphere, 0.42
for a semi-sphere, 1.05 for a cube, 0.82 for a long cylinder (when the
center axis is in the vertical direction), 0.75 for a rocket,
1.0-1.3 for a man in upright position, 1.3 for a flat plate perpendicular
to the flow, and
0.04 for a streamlined, droplet-like body.

Verification
------------

To verify the program, one may assume a heavy body in air such that the :math:`F_b`
force can be neglected, and further assume a small velocity such that the
air resistance :math:`F_d` can also be neglected. This can be obtained by
setting :math:`\mu` and :math:`\varrho` to zero. The motion then leads to
the velocity
:math:`v(t)=v_0 - gt`, which is linear in :math:`t` and therefore should be
reproduced to machine precision (say tolerance :math:`10^{-15}`) by any
implementation based on the Crank-Nicolson or Forward Euler schemes.

Another verification, but not as powerful as the one above,
can be based on computing the terminal velocity and comparing with
the exact expressions.
The advantage of this verification is that we can also
test the situation :math:`\varrho\neq 0`.

As always, the method of manufactured solutions can be applied to
test the implementation of all terms in the governing equation, but
then the solution has no physical relevance in general.

.. index:: scaling

.. _decay:app:drag:scaling:

Scaling  (2)
------------

Applying scaling, as described in the section :ref:`decay:app:scaling`,
will for the linear case reduce the need to estimate values for
seven parameters down to choosing one value of a single dimensionless parameter

.. math::
         \beta = \frac{\varrho_b gV\left(\frac{\varrho}{\varrho_b} -1\right)}{3\pi d\mu I},

provided :math:`I\neq 0`. If the motion starts from rest, :math:`I=0`, the scaled
problem reads :math:`\bar u^{\prime}=1-\bar u`, :math:`\bar u(0)=0`, and there is
no need for estimating physical parameters (!).
This means that there is a single universal solution to the problem
of a falling body starting from rest:
:math:`\bar u(t) = 1 - e^{-\bar t}`. All real
physical cases correspond to stretching the :math:`\bar t` axis and the :math:`\bar u`
axis in this dimensionless solution. More precisely, the physical velocity
:math:`u(t)` is related to the dimensionless velocity :math:`\bar u(\bar t)` through

.. math::
         u = \frac{\varrho_bgV\left(\frac{\varrho}{\varrho_b} -1\right)}{3\pi d\mu}\bar u(t/(g(\varrho/\varrho_b -1))) =
        \frac{\varrho_bgV\left(\frac{\varrho}{\varrho_b} -1\right)}{3\pi d\mu}(1 -
        e^{t/(g(\varrho/\varrho_b -1))}){\thinspace .}

.. _decay:app:viscoelasticity:

Viscoelastic materials
======================

.. index:: Kelvin-Vogt material model

.. index:: viscoelasticity

When stretching a rod made of a perfectly elastic material, the
elongation (change in the rod's
length) is proportional to the magnitude of the applied force.
Mathematical models for material behavior under application of
external forces use *strain* :math:`\varepsilon`
and *stress* :math:`\sigma` instead of elongation and
forces. Strain is relative change in elongation and stress is force
per unit area. An elastic material has a linear relation between
stress and strain:  :math:`\sigma = E\varepsilon`. This is a good model
for many materials, but frequently the velocity of the deformation
(or more precisely, the strain rate :math:`\varepsilon^{\prime}`)
also influences the stress. This is particularly the case for
materials like organic polymers, rubber, and wood. When the stress
depends on both the strain and the strain rate, the material is
said to be viscoelastic. A common model relating forces to deformation
is the `Kelvin-Vogt model <https://en.wikipedia.org/wiki/Kelvin-Voigt_material>`__:

.. _Eq:decay:app:viscoelasticity:se:

.. math::
   :label: decay:app:viscoelasticity:se
        
        \sigma(t) = E\varepsilon(t) + \eta\varepsilon^{\prime}(t){\thinspace .}
        
        

Compared to a perfectly elastic material, which deforms instantaneously
when a force is acting, a Kelvin-Vogt material will spend some time
to elongate. For example, when an elastic rod is subject to a constant
force :math:`\boldsymbol{\sigma}` at :math:`t=0`, the strain immediately adjusts to :math:`\varepsilon
=\sigma/E`. A Kelvin-Vogt material, however, has a response
:math:`\varepsilon(t) = \frac{sigma}{E}(1-e^{Et/\eta})`. Removing the force
when the strain is :math:`\varepsilon(t_1) = I` will for an elastic material
immediately bring the strain back to zero, while a Kelvin-Vogt
material will decay: :math:`\varepsilon = Ie^{-(t-t_1)E/\eta)}`.

Introducing :math:`u` for :math:`\varepsilon` and treating :math:`\boldsymbol{\sigma}(t)` as a
given function, we can write the Kelvin-Vogt model in our standard form

.. math::
        
        u^{\prime}(t) = -au(t) + b(t),
        

with :math:`a = E/\eta` and :math:`b(t)=\boldsymbol{\sigma}(t)/\eta`. An initial condition,
usually :math:`u(0)=0`, is needed.

.. _decay:app:diffusion:Fourier:

Decay ODEs from solving a PDE by Fourier expansions
===================================================

.. Maybe move to diffusion part? Makes sense there too, or refer...or

.. repeat, or make one exer with two k's and then generalize in diffusion

Suppose we have a partial differential equation

.. math::
         \frac{\partial u}{\partial t} = \alpha\frac{\partial^2u}{\partial x^2}
        + f(x,t),
        

with boundary conditions :math:`u(0,t)=u(L,t)=0` and initial condition
:math:`u(x,0)=I(x)`. One may express the solution as

.. math::
         u(x,t) = \sum_{k=1}^m A_k(t)e^{ikx\pi/L},

for appropriate unknown functions :math:`A_k`, :math:`k=1,\ldots,m`.
We use the complex exponential :math:`e^{ikx\pi/L}` for easy algebra, but
the physical :math:`u` is taken as the real part of any complex expression.
Note that the expansion in terms of :math:`e^{ikx\pi/L}` is compatible with
the boundary conditions: all functions :math:`e^{ikx\pi/L}` vanish for
:math:`x=0` and :math:`x=L`. Suppose we can express :math:`I(x)` as

.. math::
         I(x) = \sum_{k=1}^m I_ke^{ikx\pi/L}
        {\thinspace .}
        

Such an expansion can be computed by well-known Fourier expansion techniques,
but those details are not important here.
Also, suppose we can express the given :math:`f(x,t)` as

.. math::
         f(x,t) = \sum_{k=1}^m b_k(t)e^{ikx\pi/L}
        {\thinspace .}
        

Inserting the expansions for :math:`u`
and :math:`f` in the differential equations demands that all terms corresponding
to a given :math:`k` must be equal. The calculations result in the follow
system of ODEs:

.. math::
        
        A_k^{\prime}(t) = -\alpha\frac{k^2\pi^2}{L^2} + b_k(t),\quad k=1,\ldots,m
        {\thinspace .}
        

From the initial condition

.. math::
         u(x,0)=\sum_k A_k(0)e^{ikx\pi/L}=I(x)=\sum_k I_k e^{(ikx\pi/L)},

so it follows that :math:`A_k(0)=I_k`, :math:`k=1,\ldots,m`. We then have :math:`m`
equations of the form :math:`A_k^{\prime}=-a A_k +b`, :math:`A_k(0)=I_k`, for
appropriate definitions of :math:`a` and :math:`b`. These ODE problems
are independent of each other such that we can solve one problem
at a time. The outlined technique is a quite common solution approach to
partial differential equations.

**Remark.**
Since :math:`a_k` depends on :math:`k` and the stability of the
Forward Euler scheme demands :math:`a_k\Delta t \leq 1`, we get that :math:`\Delta
t \leq \alpha^{-1}L^2\pi^{-2} k^{-2}` for this scheme.  Usually, quite
large :math:`k` values are needed to accurately represent the given
functions :math:`I` and :math:`f` so that :math:`\Delta t` in the Forward Euler scheme
needs to be very small for these large values of :math:`k`.  Therefore, the
Crank-Nicolson and Backward Euler schemes, which allow larger :math:`\Delta
t` without any growth in the solutions, are more popular choices when
creating time-stepping algorithms for partial differential equations
of the type considered in this example.

Exercises  (4)
==============

.. --- begin exercise ---

.. _decay:app:exer:radio:C14:

Exercise 16: Radioactive decay of Carbon-14
-------------------------------------------

The `Carbon-14 <http://en.wikipedia.org/wiki/Carbon-14>`__ isotope,
whose radioactive decay is used extensively in dating organic material
that is tens of thousands of years old, has a half-life of :math:`5,730`
years.  Determine the age of an organic material that contains 8.4 percent
of its initial amount of Carbon-14.  Use a time unit of 1 year in the
computations.  The uncertainty in the half time of Carbon-14 is :math:`\pm
40` years.  What is the corresponding uncertainty in the estimate of
the age?

.. --- begin hint in exercise ---

**Hint 1.**
Let :math:`A` be the amount of Carbon-14. The ODE problem is then
:math:`A^{\prime}(t)=-aA(t)`, :math:`A(0)=I`. Introduced the scaled amount
:math:`u=A/I`. The ODE problem for :math:`u` is :math:`u^{\prime}=-au`, :math:`u(0)=1`.
Measure time in years.
Simulate until the first mesh point :math:`t_m` such that :math:`u(t_m)\leq 0.084`.

.. --- end hint in exercise ---

.. --- begin hint in exercise ---

**Hint 2.**
Use simulations with :math:`5,730\pm 40` y as input
and find the corresponding uncertainty interval for the result.

.. --- end hint in exercise ---

.. removed !bsol ... !esol environment (because of the command-line option --without_solutions)

Filename: ``carbon14``.

.. --- end exercise ---

.. --- begin exercise ---

.. _decay:app:exer:cooling:schemes:

Exercise 17: Derive schemes for Newton's law of cooling
-------------------------------------------------------

Show in detail how we can apply the ideas of the Forward Euler,
Backward Euler, and Crank-Nicolson
discretizations to derive explicit
computational formulas for new temperature values in Newton's law of
cooling (see the section :ref:`decay:app:Newton:cooling`):

.. math::
        
        \frac{dT}{dt} = -k(T-T_s(t)),\quad T(0)=T_0{\thinspace .}
        

Here, :math:`T` is the temperature of the body, :math:`T_s(t)` is the temperature
of the surroundings, :math:`t` is time, :math:`k` is the heat transfer
coefficient, and :math:`T_0` is the initial temperature of the body.
Summarize the discretizations in a :math:`\theta`-rule
such that you can get the three
schemes from a single formula by varying the :math:`\theta` parameter.

.. removed !bsol ... !esol environment (because of the command-line option --without_solutions)

Filename: ``schemes_cooling``.

.. --- end exercise ---

.. --- begin exercise ---

.. _decay:app:exer:cooling:py:

Exercise 18: Implement schemes for Newton's law of cooling
----------------------------------------------------------

The goal of this exercise is to implement the schemes from
:ref:`decay:app:exer:cooling:schemes` and investigate
several approaches for verifying the implementation.

**a)**
Implement the :math:`\theta`-rule from
:ref:`decay:app:exer:cooling:schemes` in a function

.. code-block:: text

        cooling(T0, k, T_s, t_end, dt, theta=0.5)

where ``T0`` is the initial temperature, ``k`` is
the heat transfer coefficient, ``T_s`` is a function of ``t`` for
the temperature of the
surroundings, ``t_end`` is the end time of the simulation, ``dt`` is the
time step, and ``theta`` corresponds to :math:`\theta`.  The ``cooling``
function should return the temperature as an array ``T`` of values at
the mesh points and the time mesh ``t``.

.. removed !bsol ... !esol environment (because of the command-line option --without_solutions)

**b)**
In the case :math:`\lim_{t\rightarrow\infty}T_s(t)=C=\mbox{const}`,
explain why :math:`T(t)\rightarrow C`. Construct an example where you
can illustrate this property in a plot. Implement a corresponding
test function that checks the correctness of the asymptotic
value of the solution.

.. removed !bsol ... !esol environment (because of the command-line option --without_solutions)

**c)**
A piecewise constant surrounding temperature,

.. math::
         T_s(t) = \left\lbrace\begin{array}{ll} C_0,& 0\leq t\leq t^*\\ 
        C_1, & t>t^*,\end{array}\right.
        

corresponds to a sudden change in the environment
at :math:`t=t^*`. Choose :math:`C_0=2T_0`, :math:`C_1=\frac{1}{2}T_0`, and
:math:`t^*=3/k`. Plot the solution :math:`T(t)` and explain why it seems physically
reasonable.

.. removed !bsol ... !esol environment (because of the command-line option --without_solutions)

**d)**
We know from the ODE :math:`u^\prime =-au` that the Crank-Nicolson scheme
can give non-physical oscillations for :math:`\Delta t > 2/a`.
In the present problem, this results indicates
that the Crank-Nicolson scheme give undesired
oscillations for :math:`\Delta t > 2/k`.
Discuss if this a potential problem in the physical case from c).

.. removed !bsol ... !esol environment (because of the command-line option --without_solutions)

**e)**
Find an expression for the exact solution of
:math:`T^{\prime} = -k(T-T_s(t))`, :math:`T(0)=T_0`.
Construct a test case and compare the
numerical and exact solution in a plot.

Find a value of the time step
:math:`\Delta t` such that the two solution curves cannot (visually) be
distinguished from each other. Many scientists will claim that such a
plot provides evidence for a correct implementation, but point out why
there still may be errors in the code.  Can you introduce bugs in the
``cooling`` function and still achieve visually coinciding curves?

.. --- begin hint in exercise ---

**Hint.**
The exact solution can be derived by multiplying :eq:`decay:Newton:cooling`
by the integrating factor :math:`e^{kt}`.

.. --- end hint in exercise ---

.. removed !bsol ... !esol environment (because of the command-line option --without_solutions)

**f)**
Implement a test function for checking that the solution returned by
the ``cooling`` function is identical to the exact numerical
solution of the problem (to machine precision) when :math:`T_s` is constant.

.. --- begin hint in exercise ---

**Hint.**
The exact solution of the
discrete equations in the case :math:`T_s` is a constant can be found by
introducing :math:`u=T-T_s` to get a problem :math:`u^{\prime}=-ku`, :math:`u(0)=T_0-T_s`.
The solution of the discrete equations is then of the form
:math:`u^{n}=(T_0-T_s)A^n` for some amplification factor :math:`A`. The
expression for :math:`T^n` is then :math:`T^n = T_s(t_n) + u^n =
T_s + (T_0-T_s)A^n`.
We find that

.. math::
         A = \frac{1 - (1-\theta) k\Delta t}{1 + \theta k\Delta t}{\thinspace .}

The test function, testing several :math:`\theta` values for a quite coarse
mesh, may take the form

.. code-block:: python

        def test_discrete_solution():
            """
            Compare the numerical solution with an exact solution of the scheme
            when the T_s is constant.
            """
            T_s = 10
            T0 = 2
            k = 1.2
            dt = 0.1   # can use any mesh
            N_t = 6    # any no of steps will do
            t_end = dt*N_t
            t = np.linspace(0, t_end, N_t+1)
        
            for theta in [0, 0.5, 1, 0.2]:
                u, t = cooling(T0, k, lambda t: T_s , t_end, dt, theta)
                A = (1 - (1-theta)*k*dt)/(1 + theta*k*dt)
                u_discrete_exact = T_s + (T0-T_s)*A**(np.arange(len(t)))
                diff = np.abs(u - u_discrete_exact).max()
                print 'diff computed and exact discrete solution:', diff
                tol = 1E-14
                success = diff < tol
                assert success, 'diff=%g' % diff

Running this function shows that the ``diff`` variable is ``3.55E-15``
as maximum so a tolerance of :math:`10^{-14}` is appropriate.
This is a good test that the ``cooling`` function works!

.. --- end hint in exercise ---

Filename: ``cooling``.

.. --- end exercise ---

.. --- begin exercise ---

.. _decay:app:exer:cooling:murder:

Exercise 19: Find time of murder from body temperature
------------------------------------------------------

.. `<http://www.biology.arizona.edu/BioMath/tutorials/Applications/Cooling.html>`_

A detective measures the temperature of a dead body to be 26.7 C at 2
pm. One hour later the temperature is 25.8 C. The question is when
death occurred.

Assume that Newton's law of cooling :eq:`decay:Newton:cooling` is an
appropriate mathematical model for the evolution of the temperature in
the body.  First, determine :math:`k` in :eq:`decay:Newton:cooling` by
formulating a Forward Euler approximation with one time steep from
time 2 am to time 3 am, where knowing the two temperatures allows for
finding :math:`k`. Assume the temperature in the air to be 20 C. Thereafter,
simulate the temperature evolution from the time of murder, taken as
:math:`t=0`, when :math:`T=37\hbox{ C}`, until the temperature reaches 25.8 C. The
corresponding time allows for answering when death occurred.

.. removed !bsol ... !esol environment (because of the command-line option --without_solutions)

Filename: ``detective``.

.. --- end exercise ---

.. --- begin exercise ---

.. _decay:app:exer:cooling:osc:

Exercise 20: Simulate an oscillating cooling process
----------------------------------------------------

The surrounding temperature :math:`T_s` in Newton's law of cooling
:eq:`decay:Newton:cooling` may vary in time. Assume that the
variations are periodic with period :math:`P` and amplitude :math:`a` around
a constant mean temperature :math:`T_m`:

.. math::
        
        T_s(t) = T_m + a\sin\left(\frac{2\pi}{P}t\right)
        {\thinspace .}
        

Simulate a process with the following data: :math:`k=0.05 \hbox{ min}^{-1}`,
:math:`T(0)=5` C, :math:`T_m=25` C, :math:`a=2.5` C, and :math:`P=1` h, :math:`P=10` min, and :math:`P=6` h.
Plot the :math:`T` solutions and :math:`T_s` in the same plot.

.. removed !bsol ... !esol environment (because of the command-line option --without_solutions)

Filename: ``osc_cooling``.

.. --- end exercise ---

.. --- begin exercise ---

.. _decay:app:exer:stoch:nuclear:

Exercise 21: Simulate stochastic radioactive decay
--------------------------------------------------

The purpose of this exercise is to implement the stochastic model
described in the section :ref:`decay:app:nuclear` and show that its
mean behavior approximates the solution of the corresponding
ODE model.

The simulation goes on for a time interval :math:`[0,T]` divided into
:math:`N_t` intervals of length :math:`\Delta t`. We start with :math:`N_0`
atoms. In some time interval, we have :math:`N` atoms that have survived.
Simulate :math:`N` Bernoulli trials with probability :math:`\lambda\Delta t`
in this interval by drawing :math:`N` random numbers, each being 0 (survival)
or 1 (decay), where the probability of getting 1 is :math:`\lambda\Delta t`.
We are interested in the number of decays, :math:`d`, and the number of
survived atoms in the next interval is then :math:`N-d`.
The Bernoulli trials
are simulated by drawing :math:`N` uniformly distributed real numbers on
:math:`[0,1]` and saying that 1 corresponds to a value less than :math:`\lambda\Delta t`:

.. code-block:: python

        # Given lambda_, dt, N
        import numpy as np
        uniform = np.random.uniform(N)
        Bernoulli_trials = np.asarray(uniform < lambda_*dt, dtype=np.int)
        d = Bernoulli_trials.size

Observe that ``uniform < lambda_*dt`` is a boolean array whose true
and false values become 1 and 0, respectively, when converted to an
integer array.

Repeat the simulation over :math:`[0,T]` a large number of times, compute the average
value of :math:`N` in each interval, and compare with the solution of
the corresponding ODE model.
Filename: ``stochastic_decay``.

.. --- end exercise ---

.. --- begin exercise ---

.. _decay:app:exer:radio:twosubst:

Exercise 22: Radioactive decay of two substances
------------------------------------------------

Consider two radioactive substances A and B. The nuclei in substance A
decay to form nuclei of type B with a half-life :math:`A_{1/2}`, while
substance B decay to form type A nuclei with a half-life :math:`B_{1/2}`.
Letting :math:`u_A` and :math:`u_B` be the fractions of the initial amount of
material in substance A and B, respectively, the following system of
ODEs governs the evolution of :math:`u_A(t)` and :math:`u_B(t)`:

.. math::
        
        \frac{1}{\ln 2} u_A^{\prime} = u_B/B_{1/2} - u_A/A_{1/2},
        

.. math::
          
        \frac{1}{\ln 2} u_B^{\prime} = u_A/A_{1/2} - u_B/B_{1/2},
        

with :math:`u_A(0)=u_B(0)=1`.

**a)**
Make a simulation program that solves for :math:`u_A(t)` and :math:`u_B(t)`.

**b)**
Verify the implementation by computing analytically
the limiting values of
:math:`u_A` and :math:`u_B` as :math:`t\rightarrow \infty` (assume :math:`u_A^{\prime},u_B^{\prime}\rightarrow 0`)
and comparing these with those obtained numerically.

**c)**
Run the program for the case of :math:`A_{1/2}=10` minutes and :math:`B_{1/2}=50` minutes.
Use a time unit of 1 minute. Plot :math:`u_A` and :math:`u_B` versus time in the same
plot.

Filename: ``radioactive_decay_2subst``.

.. --- end exercise ---

.. --- begin exercise ---

.. _decay:app:exer:kinetics:AB:

Exercise 23: Simulate a simple chemical reaction
------------------------------------------------

Consider the simple chemical reaction where a substance A is turned
into a substance B according to

.. math::
        
        \frac{d[A]}{dt} &= -k[A],\\ 
        \frac{d[B]}{dt} &= k[A],\\ 
        

where :math:`[A]` and :math:`[B]` are the concentrations of A and B, respectively.
It may be a challenge to find appropriate values of :math:`k`, but we can avoid
this problem by working with a scaled model (as explained in
the section :ref:`decay:app:scaling`).
Scale the model above, using a time scale :math:`1/k`, and use
the initial concentration
of :math:`[A]` as scale for :math:`[A]` and :math:`[B]`. Show that the scaled system
reads

.. math::
        
        \frac{du}{dt} &= -u,\\ 
        \frac{dv}{dt} &= u,\\ 
        

with initial conditions :math:`u(0)=1`, and :math:`v(0)=\alpha`, where
:math:`\alpha = [B](0)/[A](0)` is a dimensionless number, and
:math:`u` and :math:`v` are the scaled concentrations of :math:`[A]` and :math:`[B]`,
respectively. Implement a numerical scheme that can be used to
find the solutions
:math:`u(t)` and :math:`v(t)`. Visualize :math:`u` and :math:`v` in the same plot.
Filename: ``chemcial_kinetics_AB``.

.. --- end exercise ---

.. --- begin exercise ---

.. _decay:app:exer:kinetics:ABn:

Exercise 24: Simulate an :math:`n`-th order chemical reaction
-------------------------------------------------------------

An :math:`n`-order chemical reaction, generalizing the model in
:ref:`decay:app:exer:kinetics:AB`, takes the form

.. math::
        
        \frac{d[A]}{dt} &= -k[A]^n,\\ 
        \frac{d[B]}{dt} &= k[A]^n,\\ 
        

where symbols are as defined in :ref:`decay:app:exer:kinetics:AB`.
Bring this model on dimensionless form, using a time scale :math:`[A](0)^{n-1}/k`,
and show that the dimensionless model simplifies to

.. math::
        
        \frac{du}{dt} &= -u^n,\\ 
        \frac{dv}{dt} &= u^n,\\ 
        

with :math:`u(0)=1` and :math:`v(0)=\alpha = [B](0)/[A](0)`. Solve numerically for
:math:`u(t)` and show a plot with :math:`u` for :math:`n=0.5, 1, 2, 4`.
Filename: ``chemcial_kinetics_ABn``.

.. --- end exercise ---

.. --- begin exercise ---

.. _decay:app:exer:MMK:

Exercise 25: Simulate a biochemical process
-------------------------------------------

The purpose of this exercise is to simulate the ODE system
:eq:`decay:app:MMK:ES1`-:eq:`decay:app:MMK:E1` modeling a simple
biochemical process.

**a)**
Scale :eq:`decay:app:MMK:ES1`-:eq:`decay:app:MMK:E1` such that
we can work with dimensionless parameters, which are easier to prescribe.
Introduce

.. math::
         \bar Q = \frac{[ES]}{Q_c},\quad
        \bar P = \frac{P}{P_c},\quad \bar S = \frac{S}{S_0},\quad \bar E = \frac{E}{E_0},\quad \bar t = \frac{t}{t_c},

where appropriate scales are

.. math::
         Q_c = \frac{S_0E_0}{K},\quad P_c = Q_c, \quad t_c=\frac{1}{k_+E_0},

with :math:`K=(k_v+k_-)/k_+` (Michaelis constant). Show that the scaled
system becomes

.. _Eq:decay:app:MMK:Q2:

.. math::
   :label: decay:app:MMK:Q2
        
        \frac{d\bar Q}{d\bar t} = \alpha (\bar E\bar S
        - \bar Q),
        
        

.. _Eq:decay:app:MMK:P2:

.. math::
   :label: decay:app:MMK:P2
          
        \frac{d\bar P}{d\bar t} = \beta\bar Q,
        
        

.. _Eq:decay:app:MMK:S2:

.. math::
   :label: decay:app:MMK:S2
          
        \frac{d\bar S}{d\bar t} = -\bar E\bar S
        + (1 - \beta\alpha^{-1})\bar Q,
        
        

.. _Eq:decay:app:MMK:E2:

.. math::
   :label: decay:app:MMK:E2
          
        \epsilon\frac{d\bar E}{d\bar t} = -\bar E\bar S + \bar Q,
        
        

where we have three dimensionless parameters

.. math::
         \alpha = \frac{K}{E_0},\quad \beta = \frac{k_v}{k_+ E_0},\quad
        \epsilon = \frac{E_0}{S_0}{\thinspace .}
        
        The corresponding initial conditions are $\bar Q=\bar P=0$ and
        $\bar S=\bar E=1$.

.. removed !bsol ... !esol environment (because of the command-line option --without_solutions)

**b)**
Implement a function for
solving :eq:`decay:app:MMK:Q2`-:eq:`decay:app:MMK:E2`.

.. removed !bsol ... !esol environment (because of the command-line option --without_solutions)

**c)**
There are two conservation equations implied by
:eq:`decay:app:MMK:ES1`-:eq:`decay:app:MMK:E1`:

.. math::
        
        [ES] + [E] = E_0,
        

.. math::
          
        [ES] + [S] + [P] = S_0{\thinspace .}
        

Derive these two equations. Use these properties in the function
in b) to do a partial verification of the solution at each time step.

.. removed !bsol ... !esol environment (because of the command-line option --without_solutions)

**d)**
Simulate a case with :math:`T=8`, :math:`\alpha = 1`, :math:`\beta=4`, and two
:math:`\epsilon` values: 0.9 and 0.1.

.. removed !bsol ... !esol environment (because of the command-line option --without_solutions)

Filename: ``biochem``.

.. --- end exercise ---

.. --- begin exercise ---

.. _decay:app:exer:SIR:

Exercise 26: Simulate spreading of a disease
--------------------------------------------

The SIR model :eq:`decay:app:SIR:S`-:eq:`decay:app:SIR:R` can be used
to simulate spreading of an epidemic disease.

**a)**
Estimating the parameter :math:`\beta`
is difficult so it can be handy to scale the equations. Use
:math:`t_c=1/\nu` as time scale, and scale :math:`S`, :math:`I`, and :math:`R` by
the population size :math:`N=S(0)+I(0)+R(0)`. Show that the resulting dimensionless
model becomes

.. _Eq:decay:app:SIR:S2:

.. math::
   :label: decay:app:SIR:S2
        
        \frac{d\bar S}{d\bar t} = - R_0\bar S\bar I,
        
        

.. _Eq:decay:app:SIR:I2:

.. math::
   :label: decay:app:SIR:I2
          
        \frac{d\bar I}{d\bar t} = R_0 \bar S\bar I - \bar I,
        
        

.. _Eq:decay:SIR:R2:

.. math::
   :label: decay:SIR:R2
          
        \frac{d\bar R}{d\bar t} = I,
        
        

.. math::
          
        \bar S(0) = 1-\alpha,
        

.. math::
          
        \bar I(0) = \alpha,
        

.. math::
          
        \bar R(0) = 0,
        

where :math:`R_0` and :math:`\alpha` are the only parameters in the problem:

.. math::
         R_0 = \frac{N\beta}{\nu}, \quad \alpha = \frac{I(0)}{N}{\thinspace .}

A quantity with a bar denote a dimensionless version of that quantity, e.g,
:math:`\bar t` is dimensionless time :math:`t`, and :math:`\bar t = \nu t`.

.. removed !bsol ... !esol environment (because of the command-line option --without_solutions)

**b)**
Show that the :math:`R_0` parameter governs whether the disease will spread
or not at :math:`t=0`.

.. --- begin hint in exercise ---

**Hint.**
Spreading means :math:`dI/dt>0`.

.. --- end hint in exercise ---

.. removed !bsol ... !esol environment (because of the command-line option --without_solutions)

**c)**
Implement the scaled SIR model. Check at every time step,
as a verification, that
:math:`\bar S + \bar I + \bar R = 1`.

**d)**
Simulate the spreading of a disease where :math:`R_0=1.1` and 1 percent of
the population is infected at time :math:`t=0`.

.. removed !bsol ... !esol environment (because of the command-line option --without_solutions)

Filename: ``SIR``.

.. --- end exercise ---

.. --- begin exercise ---

.. _decay:app:exer:predpray:

Exercise 27: Simulate predator-pray interaction
-----------------------------------------------

The section :ref:`decay:app:predpray` describes a model for the
interaction of predator and pray populations, such as lynx and hares.

**a)**
Scale the equations :eq:`decay:app:predpray:eqH`-:eq:`decay:app:predpray:eqL`.
Use the initial population :math:`H(0)=H_0` of :math:`H` has scale for :math:`H` and :math:`L`, and
let the time scale be :math:`1/(bH_0)`.

.. removed !bsol ... !esol environment (because of the command-line option --without_solutions)

**b)**
Implement the scaled model from a). Run illustrating cases how the
two populations develop.

.. removed !bsol ... !esol environment (because of the command-line option --without_solutions)

**c)**
The scaling in a) used a scale for :math:`H` and :math:`L` based on on the
initial condition :math:`H(0)=H_0`. An alternative scaling is to make
the ODEs as simple as possible by introducing separate scales
:math:`H_c` and :math:`L_c` for :math:`H` and :math:`L`, respectively. Fit :math:`H_c`,
:math:`L_c`, and the time scale :math:`t_c` such that there are as few
dimensionless parameters as possible in the ODEs. Scale the initial
conditions. Compare the number and type of dimensionless parameters
with a).

.. removed !bsol ... !esol environment (because of the command-line option --without_solutions)

**d)**
Compute with the scaled model from c) and create plots to illustrate
the typical solutions.

.. removed !bsol ... !esol environment (because of the command-line option --without_solutions)

Filename: ``predator_pray``.

.. --- end exercise ---

.. --- begin exercise ---

.. _decay:app:exer:atm1:

Exercise 28: Simulate the pressure drop in the atmosphere
---------------------------------------------------------

We consider the models for atmospheric pressure in
the section :ref:`decay:app:atm`.
Make a program with three functions,

 * one computing the pressure :math:`p(z)` using a seven-layer model
   and varying :math:`L`,

 * one computing :math:`p(z)` using a seven-layer model,
   but with constant temperature in each layer, and

 * one computing :math:`p(z)` based on the
   one-layer model.

How can these implementations be verified? Should ease of verification
impact how you code the functions?
Compare the three models in a plot.
Filename: ``atmospheric_pressure``.

.. --- end exercise ---

.. --- begin exercise ---

.. _decay:app:exer:drag:prog:

Exercise 29: Make a program for vertical motion in a fluid
----------------------------------------------------------

Implement the Stokes' drag model :eq:`decay:app:fallingbody:model:S`
and the quadratic drag model :eq:`decay:app:fallingbody:model:q` from
the section :ref:`decay:app:drag`, using the Crank-Nicolson
scheme and a geometric mean for :math:`|v|v` as explained, and assume
constant fluid density.
At each time level, compute the Reynolds number
Re and choose the Stokes' drag model if :math:`\hbox{Re} < 1` and the
quadratic drag model otherwise.

The computation of the numerical solution should take place either in
a stand-alone function or in a solver class that looks up a problem
class for physical data. Create a module and equip it with pytest/nose
compatible test functions for automatically verifying the code.

Verification tests can be based on

 * the terminal velocity (see the section :ref:`decay:app:drag`),

 * the exact solution when the drag force is neglected
   (see the section :ref:`decay:app:drag`),

 * the method of manufactured solutions (see the section :ref:`decay:MMS`)
   combined with computing
   convergence rates (see the section :ref:`decay:convergence:rate`).

Use, e.g., a quadratic polynomial for the velocity in the method of
manufactured solutions. The expected error is :math:`{\mathcal{O}(\Delta t^2)}`
from the centered finite difference approximation and the geometric
mean approximation for :math:`|v|v`.

A solution that is linear in :math:`t` will also be an exact solution of the
discrete equations in many problems.  Show that this is true for
linear drag (by adding a source term that depends on :math:`t`), but not
for quadratic drag because of the geometric mean approximation.  Use
the method of manufactured solutions to add a source term *in the
discrete equations for quadratic drag* such that a linear function of
:math:`t` is a solution. Add a test function for checking that the linear
function is reproduced to machine precision in the case of both linear
and quadratic drag.

Apply the software to a case where a ball rises in water.  The
buoyancy force is here the driving force, but the drag will be
significant and balance the other forces after a short time.  A soccer
ball has radius 11 cm and mass 0.43 kg.  Start the motion from rest, set
the density of water, :math:`\varrho`, to :math:`1000\hbox{ kg/m}^3`, set the
dynamic viscosity, :math:`\mu`, to :math:`10^{-3}\hbox{ Pa s}`, and use a drag
coefficient for a sphere: 0.45. Plot the velocity of the rising ball.
Filename: ``vertical_motion``.

.. --- end exercise ---

.. --- begin exercise ---

.. _decay:app:exer:parachute:

Project 30: Simulate parachuting
--------------------------------

The aim of this project is to develop a general solver for the
vertical motion of a body with quadratic air drag, verify the solver,
apply the solver to a skydiver in free fall, and finally apply the
solver to a complete parachute jump.

All the pieces of software implemented in this project should be
realized as Python functions and/or classes and collected in one
module.

**a)**
Set up the differential equation problem that governs the velocity
of the motion.
The parachute jumper is subject to the gravity force and a quadratic
drag force. Assume constant density.
Add an extra source term be used for program verification.
Identify the input data to the problem.

**b)**
Make a Python module for computing the velocity of the motion.
Also equip the module with functionality for plotting the velocity.

.. --- begin hint in exercise ---

**Hint 1.**
Use the Crank-Nicolson scheme with a geometric mean of :math:`|v|v` in time to
linearize the equation of motion with quadratic drag.

.. --- end hint in exercise ---

.. --- begin hint in exercise ---

**Hint 2.**
You can either use functions or classes for implementation.
If you choose functions, make a function
``solver`` that takes all the input data in the problem as
arguments and that returns the velocity (as a mesh function) and
the time mesh. In case of a class-based implementation, introduce
a problem class with the physical data
and a solver class with the numerical data and a ``solve`` method
that stores the velocity and the mesh in the class.

Allow for a time-dependent area and drag coefficient in the
formula for the drag force.

.. --- end hint in exercise ---

**c)**
Show that a linear function of :math:`t` does not fulfill the discrete
equations because of the geometric mean approximation
used for the quadratic drag
term.  Fit a source term, as in the method of manufactured solutions,
such that a linear function of :math:`t` is a solution of the discrete
equations. Make a test function to check that this solution is reproduced
to machine precision.

**d)**
The expected error in this problem goes like :math:`\Delta t^2` because we
use a centered finite difference approximation with error :math:`{\mathcal{O}(\Delta t^2)}`
and a geometric mean approximation with error :math:`{\mathcal{O}(\Delta t^2)}`.
Use the method of manufactured solutions combined with computing
convergence rate to verify the code. Make a test function for checking
that the convergence rate is correct.

**e)**
Compute the drag force, the gravity
force, and the buoyancy force as a function of time. Create
a plot with these three forces.

.. --- begin hint in exercise ---

**Hint.**
You can either make a function ``forces(v, t, plot=None)``
that returns the forces (as mesh functions) and ``t``, and shows
a plot on the screen and also saves the plot to a file with name
stored in ``plot``
if ``plot`` is not ``None``, or you can extend the solver class with
computation of forces and include plotting of forces in the
visualization class.

.. --- end hint in exercise ---

**f)**
Compute the velocity of
a skydiver in free fall before the parachute opens.

.. --- begin hint in exercise ---

**Hint.**
Meade and Struthers [Ref10]_ provide some data relevant
to `skydiving <http://en.wikipedia.org/wiki/Parachuting>`__.
The mass of the human body and equipment
can be set to :math:`100` kg.
A skydiver in spread-eagle formation has a cross-section of 0.5 :math:`\hbox{m}^2`
in the horizontal plane.
The density of air decreases varies altitude, but can be taken
as constant, 1 :math:`\hbox{kg/m}^3`, for altitudes relevant to
skydiving (0-4000 m).
The drag coefficient for a man in upright position can be set to 1.2.
Start with a zero velocity.
A free fall typically has a terminating velocity of 45 m/s. (This value
can be used to tune other parameters.)

.. --- end hint in exercise ---

**g)**
The next task is to simulate
a parachute jumper during free fall and after the parachute opens.
At time :math:`t_p`, the parachute opens and
the drag coefficient and the cross-sectional
area change dramatically.
Use the program to simulate a jump from :math:`z=3000` m to the ground :math:`z=0`.
What is the maximum acceleration, measured in units of :math:`g`,
experienced by the jumper?

.. --- begin hint in exercise ---

**Hint.**
Following Meade and Struthers [Ref10]_, one can set the
cross-section area perpendicular to the motion to 44 :math:`\hbox{m}^2`
when the parachute is open. Assume that it takes 8 s to increase
the area linearly from the original to the final value.
The drag coefficient for an open
parachute can be taken as 1.8, but tuned using the known value
of the typical terminating velocity reached before landing:
5.3 m/s. One can take the drag coefficient as a piecewise constant
function with an abrupt change at :math:`t_p`.
The parachute is typically released after :math:`t_p=60` s, but
larger values of :math:`t_p` can be used to make plots more illustrative.

.. --- end hint in exercise ---

Filename: ``parachuting``.

.. --- end exercise ---

.. --- begin exercise ---

.. _decay:app:exer:drag:atm1:

Exercise 31: Formulate vertical motion in the atmosphere
--------------------------------------------------------

Vertical motion of a body in the atmosphere needs to take into
account a varying air density if the range of altitudes is
many kilometers. In this case, :math:`\varrho` varies with the altitude :math:`z`.
The equation of motion for the body is given in
the section :ref:`decay:app:drag`. Let us assume quadratic drag force
(otherwise the body has to be very, very small).
A differential equation problem for the air density, based on
the information for the one-layer atmospheric model in
the section :ref:`decay:app:atm`, can be set up as

.. math::
        
        p^{\prime}(z) = -\frac{Mg}{R^*(T_0+Lz)} p,
        

.. math::
          
        \varrho = p \frac{M}{R^*T}
        {\thinspace .}
        

To evaluate :math:`p(z)` we need the altitude :math:`z`. From the principle that the
velocity is the derivative of the position we have that

.. math::
        
        z^{\prime}(t) = v(t),
        

where :math:`v` is the velocity of the body.

Explain in detail how the governing equations can be discretized
by the Forward Euler and the Crank-Nicolson methods.
Discuss pros and cons of the two methods.
Filename: ``falling_in_variable_density``.

.. --- end exercise ---

.. --- begin exercise ---

.. _decay:app:exer:drag:atm2:

Exercise 32: Simulate vertical motion in the atmosphere
-------------------------------------------------------

Implement the Forward Euler or the Crank-Nicolson scheme
derived in :ref:`decay:app:exer:drag:atm1`.
Demonstrate the effect of air density variation on a falling
human, e.g., the famous fall of `Felix Baumgartner <http://en.wikipedia.org/wiki/Felix_Baumgartner>`__. The drag coefficient can be set to 1.2.
Filename: ``falling_in_variable_density``.

.. --- end exercise ---

.. --- begin exercise ---

.. _decay:app:exer:signum:

Problem 33: Compute :math:`y=|x|` by solving an ODE
---------------------------------------------------

Consider the ODE problem

.. math::
        
        y^{\prime}(x) = \left\lbrace\begin{array}{ll}
        -1, & x < 0,\\ 
        1, & x \geq 0
        \end{array}\right.\quad x\in (-1, 1],
        \quad y(1-)=1,
        

which has the solution :math:`y(x)=|x|`.
Using a mesh :math:`x_0=-1`, :math:`x_1=0`, and :math:`x_2=1`, calculate by hand
:math:`y_1` and :math:`y_2` from the Forward Euler, Backward Euler, Crank-Nicolson,
and Leapfrog methods. Use all of the former three methods for computing
the :math:`y_1` value to be used in the Leapfrog calculation of :math:`y_2`.
Thereafter, visualize how these schemes perform for a uniformly partitioned
mesh with :math:`N=10` and :math:`N=11` points.
Filename: ``signum``.

.. --- end exercise ---

.. --- begin exercise ---

.. _decay:app:exer:interest:

Problem 34: Simulate fortune growth with random interest rate
-------------------------------------------------------------

The goal of this exercise is to compute the value of a fortune subject
to inflation and a random interest rate.
Suppose that the inflation is constant at :math:`i` percent per year and that the
annual interest rate, :math:`p`, changes randomly at each time step,
starting at some value :math:`p_0` at :math:`t=0`.
The random change is from a value :math:`p^n` at :math:`t=t_n` to
:math:`p_n +\Delta p` with probability 0.25 and :math:`p_n -\Delta p` with probability 0.25.
No change occurs with probability 0.5. There is also no change if
:math:`p^{n+1}` exceeds 15 or becomes below 1.
Use a time step of one month, :math:`p_0=i`, initial fortune scaled to 1,
and simulate 1000 scenarios of
length 20 years. Compute the mean evolution of one unit of money and the
corresponding
standard deviation. Plot the mean curve along with the mean plus one
standard deviation and the mean minus one standard deviation. This will
illustrate the uncertainty in the mean curve.

.. --- begin hint in exercise ---

**Hint 1.**
The following code snippet computes :math:`p^{n+1}`:

.. code-block:: python

        import random
        
        def new_interest_rate(p_n, dp=0.5):
            r = random.random()  # uniformly distr. random number in [0,1)
            if 0 <= r < 0.25:
                p_np1 = p_n + dp
            elif 0.25 <= r < 0.5:
                p_np1 = p_n - dp
            else:
                p_np1 = p_n
            return (p_np1 if 1 <= p_np1 <= 15 else p_n)

.. --- end hint in exercise ---

.. --- begin hint in exercise ---

**Hint 2.**
If :math:`u_i(t)` is the value of the fortune in experiment number :math:`i`,
:math:`i=0,\ldots,N-1`,
the mean evolution of the fortune is

.. math::
         \bar u(t)= \frac{1}{N}\sum_{i=0}^{N-1} u_i(t),
        

and the standard deviation is

.. math::
         s(t) = \sqrt{\frac{1}{N-1}\left(- (\bar u(t))^2 +
                        \sum_{i=0}^{N-1} (u_i(t))^2\right)}
        {\thinspace .}
        

Suppose :math:`u_i(t)` is stored in an array ``u``.
The mean and the standard deviation of the fortune
is most efficiently computed by
using two accumulation arrays, ``sum_u`` and ``sum_u2``, and
performing ``sum_u += u`` and ``sum_u2 += u**2`` after every experiment.
This technique avoids storing all the :math:`u_i(t)` time series for
computing the statistics.

.. --- end hint in exercise ---

Filename: ``random_interest``.

.. --- end exercise ---

.. --- begin exercise ---

.. _decay:app:exer:pop:at:

Exercise 35: Simulate a population in a changing environment
------------------------------------------------------------

We shall study a population modeled by :eq:`decay:app:pop:ueq` where
the environment, represented by :math:`r` and :math:`f`, undergoes changes with time.

**a)**
Assume that there is a sudden drop (increase) in the birth (death)
rate at time :math:`t=t_r`,
because of limited nutrition or food supply:

.. math::
         r(t) =\left\lbrace\begin{array}{ll}
        \varrho, & t < t_r,\\ 
        \varrho - A, & t\geq t_r,\end{array}\right.
        

This drop in population growth is compensated by a sudden net immigration
at time :math:`t_f > t_r`:

.. math::
         f(t) =\left\lbrace\begin{array}{ll}
        0, & t < t_f,\\ 
        f_0, & t\geq t_a,\end{array}\right.
        

Start with :math:`\varrho` and make :math:`A > \varrho`. Experiment with
these and other parameters to
illustrate the interplay of growth and decay in such a problem.

**b)**
Now we assume that the environmental conditions changes periodically with
time so that we may take

.. math::
         r(t) = {\varrho} + A\sin\left(\frac{2\pi}{P}t\right)
        {\thinspace .}
        

That is, the combined birth and death rate oscillates around :math:`\varrho` with
a maximum change of :math:`\pm A` repeating over a period of length :math:`P` in time.
Set :math:`f=0` and experiment with the other parameters to illustrate typical
features of the solution.

Filename: ``population.py``.

.. --- end exercise ---

.. --- begin exercise ---

.. _decay:app:exer:pop:logistic1:

Exercise 36: Simulate logistic growth
-------------------------------------

Solve the logistic ODE
:eq:`decay:app:pop:logistic` using a Crank-Nicolson scheme where
:math:`(u^{n+\frac{1}{2}})^2` is approximated by a *geometric mean*:

.. math::
         (u^{n+\frac{1}{2}})^2 \approx u^{n+1}u^n
        {\thinspace .}
        

This trick makes the discrete equation linear in :math:`u^{n+1}`.
Filename: ``logistic_CN``.

.. --- end exercise ---

.. --- begin exercise ---

.. _decay:app:exer:interest:derive:

Exercise 37: Rederive the equation for continuous compound interest
-------------------------------------------------------------------

The ODE model :eq:`decay:app:interest:eq2` was derived under the assumption
that :math:`r` was constant. Perform an alternative derivation without
this assumption: 1) start with :eq:`decay:app:interest:eq1`;
2) introduce a time step :math:`\Delta t` instead of :math:`m`: :math:`\Delta t = 1/m` if
:math:`t` is measured in years; 3) divide by :math:`\Delta t` and take the
limit :math:`\Delta t\rightarrow 0`. Simulate a case where the inflation is
at a constant level :math:`I` percent per year and the interest rate oscillates:
:math:`r=-I/2 + r_0\sin(2\pi t)`.
Compare solutions for :math:`r_0=I, 3I/2, 2I`.
Filename: ``interest_modeling``.

.. --- end exercise ---

.. --- begin exercise ---

.. _decay:app:exer:viscoelasticity1:

Exercise 38: Simulate the deformation of a viscoelastic material
----------------------------------------------------------------

Stretching a rod made of polymer will cause deformations that are
well described with a Kelvin-Vogt material model
:eq:`decay:app:viscoelasticity:se`. At :math:`t=0` we apply a constant
force :math:`\sigma = \sigma_0`, but at :math:`t=t_1`, we remove the force
so :math:`\sigma=0`. Compute numerically the corresponding strain
(elongation divided by the rod's length) and visualize how it
responds in time.

.. --- begin hint in exercise ---

**Hint.**
To avoid finding proper values of the :math:`E` and :math:`\eta` parameters for
a polymer, one can scale the problem. A common dimensionless
time is :math:`\bar t= tE/\eta`. Note that :math:`\varepsilon` is already
dimensionless by definition, but it takes on small values, say up to 0.1,
so we introduce a scaling: :math:`\bar u=10\varepsilon` such that :math:`\bar u`
takes on values up to about unity.

Show that the material model then
takes the form :math:`\bar u^{\prime} = -\bar u + 10\sigma(t)/E`.
Work with the dimensionless force :math:`F=10\sigma(t)/E`, and let
:math:`F=1` for :math:`\bar t\in (0,\bar t_1)` and :math:`F=0` for :math:`\bar t\geq \bar t_1`.
A possible choice of :math:`t_1` is the characteristic time :math:`\eta/E`, which
means that :math:`\bar t_1 = 1`.

.. --- end hint in exercise ---

.. removed !bsol ... !esol environment (because of the command-line option --without_solutions)

Filename: ``KelvinVogt``.

.. --- end exercise ---

