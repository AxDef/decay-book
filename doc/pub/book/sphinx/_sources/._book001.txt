.. !split

.. _ch:preface:

Preface
%%%%%%%

There are so many excellent books on finite difference methods for
ordinary and partial differential equations that writing yet another
one requires a different view on the topic. The present book is not
so concerned with the traditional academic presentation of the topic,
but is focused at teaching the practitioner how to obtain reliable computations
involving finite difference methods. This focus is based on
a set of learning outcomes:

1. understanding of the ideas behind finite difference methods,

2. understanding how to transform an algorithm to a well-designed computer code,

3. understanding how to test (verify) the code,

4. understanding the potential artifacts in simulation results.

Compared to other textbooks, the present one has a particularly strong
emphasis on computer implementation and verification. It also has a
strong emphasis on an intuitive understanding of constructing finite
difference methods. To learn about the potential non-physical
artifacts of various methods, we study exact solutions of finite
difference schemes as these give deeper insight into the physical
behavior of the numerical methods than the traditional (and more
general) asymptotic error analysis. However, asymptotic results
regarding convergence rates, typically truncation errors,
are crucial for testing implementations,
so an extensive appendix is devoted to the computation of truncation
errors.

Various pedagogical elements are utilized to reach the learning outcomes,
and these are commented upon next.

Simplify, understand, generalize
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The book's overall pedagogical philosophy is the three-step process of
first *simplifying* the problem to something we can *understand* in
detail, and when that understanding is in place, we can *generalize*
and hopefully address real-world applications with a sound scientific
problem-solving approach.  For example, in the chapter on a particular
family of equations we first simplify the problem in question to a 1D,
constant-coefficient equation with simple boundary conditions. We
learn how to construct a finite difference method, how to implement
it, and how to understand the behavior of the numerical solution. Then
we can generalize to higher dimensions, variable coefficients, a
source term, and more complicated boundary conditions.
The solution of a compound problem is in this way
an assembly of elements that
are well understood in simpler settings.

Constructive mathematics
~~~~~~~~~~~~~~~~~~~~~~~~

This text favors a constructive approach to mathematics. Instead of
a set of definitions followed by popping up a method, we emphasize how
to think about the construction of a method. The aim is to obtain a
good intuitive understanding of the mathematical methods.

The text is written in an easy-to-read style much inspired by the
following quote.


..

    *Some people think that stiff challenges are the best device to
    induce learning, but I am not one of them. The natural way to learn
    something is by spending vast amounts of easy, enjoyable time at it.
    This goes whether you want to speak German, sight-read at the
    piano, type, or do mathematics. Give me the German storybook for
    fifth graders that I feel like reading in bed, not Goethe and a
    dictionary. The latter will bring rapid progress at first, then
    exhaustion and failure to resolve.*
    
    *The main thing to be said for stiff challenges is that inevitably
    we will encounter them, so we had better learn to face them boldly.
    Putting them in the curriculum can help teach us to do so. But for
    teaching the skill or subject matter itself, they are overrated.*
    [Ref1]_ (p. 86) Lloyd N. Trefethen, Applied Mathematician, 1955-.



This book assumes some basic knowledge of finite difference approximations,
differential equations, and scientific Python or MATLAB programming,
as often met in
an introductory numerical methods course. Readers without this background
may start with the light companion book "Finite Difference Computing with
Exponential Decay Models" [Ref2]_. That book will in
particular be a useful resource for the programming parts of the present book.
Since the present book deals with partial differential equations, the
reader is assumed to master multi-variable calculus and linear algebra.

Fundamental ideas and their associated scientific details are first
introduced in the simplest possible differential equation setting,
often an ordinary differential equation, but in a way that easily
allows reuse in more complex settings with partial differential
equations. With this approach, new concepts are introduced with a
minimum of mathematical details. The text should therefore have
a potential for use early in undergraduate student programs.

All nuts and bolts
~~~~~~~~~~~~~~~~~~

Many has experienced that "vast amounts of easy, enjoyable time", as
stated in the quote above, arises when mathematics is implemented on a
computer. The implementation process triggers understanding,
creativity, and curiosity, but many students find
the transition from a mathematical algorithm to a working code
difficult and spend a lot of time on "programming issues".

Most books on numerical methods concentrate on the mathematics of the
subject while details on going from the mathematics to a computer
implementation are less in focus. A major purpose of this text is
therefore to help the practitioner by providing *all nuts and bolts*
necessary for safely going from the mathematics to a well-designed and
well-tested computer code. A significant portion of the text is
consequently devoted to programming details.

Python as programming language
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

While MATLAB enjoys widespread popularity in books on numerical
methods, we have chosen to use the Python programming language. Python
is very similar to MATLAB, but contains a lot of modern software
engineering tools that have become standard in the software industry
and that should be adopted also for numerical computing
projects. Python is at present also experiencing an exponential growth
in popularity within the scientific computing community. One of the
book's goals is to present an up-to-date Python eco system for
implementing finite difference methods.

Program verification
~~~~~~~~~~~~~~~~~~~~

Program testing, called *verification*, is a key topic of the book.
Good verification techniques are indispensable when debugging computer
code, but also fundamental for achieving reliable simulations.
Two verification techniques saturate the book: exact solution
of discrete equations (where the approximation error vanishes) and
empirical estimation of convergence rates in problems with
exact (analytical or manufactured) solutions of the
differential equation(s).

Analysis via exact solutions of discrete equations
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Traditional asymptotic analysis of errors is important for
verification of code using convergence rates, but gives a limited
understanding of how and why a correctly implemented numerical method
may give non-physical results. By developing exact solutions, usually
based on Fourier methods, of the discrete equations, one can obtain a
physical understanding of the behavior of a numerical method. This
approach is favored for analysis of methods in this book.

Code-inspired mathematical notation
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Our primary aim is to have a clean and easy-to-read computer code, and
we want a close one-to-one relationship between the computer code and
mathematical description of the algorithm.  This principle calls for a
mathematical notation that is governed by the natural notation in the
computer code. The unknown is mostly called :math:`u`, but the meaning of
the symbol :math:`u` in the mathematical description changes as we go from
the exact solution fulfilling the differential equation problem to the
symbol ``u`` that is naturally used in the code.

Limited scope
~~~~~~~~~~~~~

The aim of this book is not to give an overview of a lot of methods
for a wide range of mathematical models.  Such information can be
found in numerous existing, more advanced books.  The aim is rather to
introduce basic concepts and a thorough understanding of how to think
about computing with finite difference methods.  We therefore go in
depth with only the most fundamental methods and equations.  However,
we have a multi-disciplinary scope and address the interplay of
mathematics, numerics, computer science, and physics.

Independent chapters
~~~~~~~~~~~~~~~~~~~~

Most book authors are careful with avoiding repetitions of material.
The chapters in this book, however, contain some overlap, because I
want the chapters to meaningful on their own. Modern publishing
technology makes it easy to take selected chapters from different
books to make a new book tailored to a specific course.
The more a chapter builds on details in other chapters, the more
difficult it is to reuse chapters in new contexts. Also, most readers
find it convenient that the most important information is explicitly
stated, even if it was already met in another chapter.

Acknowledgments
~~~~~~~~~~~~~~~

The author is particularly thankful to all the very detailed criticism
of the text provided by Professor Svein Linge.  Many students have
provided lots of useful feedback on the exposition and found many
errors in the text. Special efforts in this regard were made by Imran
Ali, Shirin Fallahi, Anders Hafreager, Daniel Alexander Mo SÃ¸reide
Houshmand, Kristian Gregorius Hustad, Mathilde Nygaard Kamperud, and
Fatemeh Miri.

