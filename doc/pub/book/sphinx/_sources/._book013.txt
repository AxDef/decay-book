.. !split

.. _trunc:vib:

Truncation errors in vibration ODEs
===================================

.. _trunc:vib:undamped:

Linear model without damping
----------------------------

The next example on computing the truncation error involves the
following ODE for vibration problems:

.. _Eq:trunc:vib:undamped:ode:

.. math::

    \tag{478}
    u''(t) + \omega^2 u(t) = 0\tp
        
        

Here, :math:`\omega` is a given constant.

The truncation error of a centered finite difference scheme
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Using a standard, second-ordered, central difference for the
second-order derivative time, we have the scheme

.. _Eq:trunc:vib:undamped:scheme:

.. math::

    \tag{479}
    [D_tD_t u + \omega^2u=0]^n
        
        \tp
        

Inserting the exact solution :math:`\uex` in this equation and adding
a residual :math:`R` so that :math:`\uex` can fulfill the equation results in

.. _Eq:_auto147:

.. math::

    \tag{480}
    [D_tD_t \uex + \omega^2\uex =R]^n
        \tp
        
        

To calculate the truncation error :math:`R^n`, we use
:ref:`(447) <Eq:trunc:table:fd2:center:eq>`-:ref:`(448) <Eq:trunc:table:fd2:center>`, i.e.,

.. math::
         [D_tD_t \uex]^n = \uex''(t_n) + \frac{1}{12}\uex''''(t_n)\Delta t^2,

and the fact that :math:`\uex''(t) + \omega^2\uex(t)=0`. The result is

.. _Eq:_auto148:

.. math::

    \tag{481}
    R^n =  \frac{1}{12}\uex''''(t_n)\Delta t^2 + \Oof{\Delta t^4}
        \tp
        
        

The truncation error of approximating :math:`u'(0)`
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The initial conditions for :ref:`(478) <Eq:trunc:vib:undamped:ode>` are
:math:`u(0)=I` and :math:`u'(0)=V`. The latter involves a finite difference
approximation. The standard choice

.. math::
         [D_{2t}u=V]^0,

where :math:`u^{-1}` is eliminated with the aid of the discretized ODE
for :math:`n=0`, involves a centered difference with an
:math:`\Oof{\Delta t^2}` truncation error
given by :ref:`(437) <Eq:trunc:table:fd1:center2:eq>`-:ref:`(438) <Eq:trunc:table:fd1:center2>`.
The simpler choice

.. math::
         [D_t^+u = V]^0,

is based on a forward difference with a truncation error :math:`\Oof{\Delta t}`.
A central question is if this initial error will impact the
order of the scheme throughout the simulation.
:ref:`trunc:exer:vib:ic:fw` asks you to quickly perform an
experiment to investigate this question.

Truncation error of the equation for the first step
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

We have shown that the truncation error of the difference used to
approximate the initial condition :math:`u'(0)=0` is :math:`\Oof{\Delta t^2}`,
but can also investigate the difference equation used for
the first step. In a truncation error setting, the right way to
view this equation is not to use the initial condition
:math:`[D_{2t}u=V]^0` to express
:math:`u^{-1}=u^1 - 2\Delta t V` in order
to eliminate :math:`u^{-1}` from the discretized
differential equation, but the other way around: the fundamental
equation is the discretized initial condition :math:`[D_{2t}u=V]^0` and we
use the discretized ODE :math:`[D_tD_t + \omega^2 u=0]^0` to eliminate
:math:`u^{-1}` in the disretized initial condition. From :math:`[D_tD_t + \omega^2 u=0]^0`
we have

.. math::
         u^{-1} = 2u^0 - u^1 - \Delta t^2\omega^2 u^0,

which inserted in :math:`[D_{2t}u = V]^0` gives

.. _Eq:trunc:vib:undamped:ic:d2:

.. math::

    \tag{482}
    \frac{u^1 - u^0}{\Delta t} + \half\omega^2\Delta t u^0 = V\tp
        
        

The first term can be recognized as a forward difference such that
the equation can be written in operator notation as

.. math::
         [D_t^+ u + \half\omega^2\Delta t u = V]^0\tp

The truncation error is defined as

.. math::
         [D_t^+ \uex + \half\omega^2\Delta t \uex - V = R]^0\tp

Using :ref:`(441) <Eq:trunc:table:fd1:fw:eq>`-:ref:`(442) <Eq:trunc:table:fd1:fw>` with
one more term in the Taylor series, we get that

.. math::
         \uex'(0) + \half\uex''(0)\Delta t + \frac{1}{6}\uex'''(0)\Delta t^2
         + \Oof{\Delta t^3}
        + \half\omega^2\Delta t \uex(0) - V = R^n\tp

Now, :math:`\uex'(0)=V` and :math:`\uex''(0)=-\omega^2 \uex(0)` so we get

.. math::
         R^n = \frac{1}{6}\uex'''(0)\Delta t^2 + \Oof{\Delta t^3}\tp

There is another way of analyzing the discrete initial
condition, because eliminating :math:`u^{-1}` via the discretized ODE
can be expressed as

.. _Eq:trunc:vib:undamped:ic:d3:

.. math::

    \tag{483}
    [ D_{2t} u + \Delta t(D_tD_t u - \omega^2 u) = V]^0\tp
        
        

Writing out :ref:`(483) <Eq:trunc:vib:undamped:ic:d3>` shows that the equation is
equivalent to :ref:`(482) <Eq:trunc:vib:undamped:ic:d2>`.
The truncation error is defined by

.. math::
         [ D_{2t} \uex + \Delta t(D_tD_t \uex - \omega^2 \uex) = V + R]^0\tp

Replacing the difference via
:ref:`(437) <Eq:trunc:table:fd1:center2:eq>`-:ref:`(438) <Eq:trunc:table:fd1:center2>` and
:ref:`(447) <Eq:trunc:table:fd2:center:eq>`-:ref:`(448) <Eq:trunc:table:fd2:center>`, as
well as using :math:`\uex'(0)=V` and :math:`\uex''(0) = -\omega^2\uex(0)`,
gives

.. math::
         R^n = \frac{1}{6}u'''(0)\Delta t^2 + \Oof{\Delta t^3}\tp

Computing correction terms
~~~~~~~~~~~~~~~~~~~~~~~~~~

The idea of using correction terms to increase the order of :math:`R^n` can
be applied as described in the section :ref:`trunc:decay:corr`. We look at

.. math::
         [D_tD_t \uex + \omega^2\uex =C + R]^n,

and observe that :math:`C^n` must be chosen to cancel
the :math:`\Delta t^2` term in :math:`R^n`. That is,

.. math::
         C^n = \frac{1}{12}\uex''''(t_n)\Delta t^2\tp

To get rid of the 4th-order derivative we can use the differential
equation: :math:`u''=-\omega^2u`, which implies :math:`u'''' = \omega^4 u`.
Adding the correction term to the ODE results in

.. _Eq:trunc:vib:undamped:corr:ode:

.. math::

    \tag{484}
    u'' + \omega^2(1 - \frac{1}{12}\omega^2\Delta t^2)u = 0\tp
        
        

Solving this equation by the standard scheme

.. math::
         [D_tD_t u + \omega^2(1 - \frac{1}{12}\omega^2\Delta t^2)u=0]^n,

will result in a scheme with truncation error :math:`\Oof{\Delta t^4}`.

We can use another set of arguments to justify that :ref:`(484) <Eq:trunc:vib:undamped:corr:ode>` leads to a higher-order method.
Mathematical analysis of the scheme :ref:`(479) <Eq:trunc:vib:undamped:scheme>`
reveals that the numerical frequency :math:`\tilde\omega` is (approximately
as :math:`\Delta t\rightarrow 0`)

.. math::
         \tilde\omega = \omega (1+\frac{1}{24}\omega^2\Delta t^2)\tp

One can therefore attempt to replace :math:`\omega` in the ODE by
a slightly smaller :math:`\omega` since the numerics will make it larger:

.. Ref to exercise

.. math::
         [ u'' + (\omega(1 - \frac{1}{24}\omega^2\Delta t^2))^2 u = 0\tp

Expanding the squared term and omitting the higher-order term :math:`\Delta t^4`
gives exactly the ODE :ref:`(484) <Eq:trunc:vib:undamped:corr:ode>`. Experiments
show that :math:`u^n` is computed to 4th order in :math:`\Delta t`.

.. _trunc:vib:gen:

Model with damping and nonlinearity
-----------------------------------

The model :ref:`(478) <Eq:trunc:vib:undamped:ode>`
can be extended to include damping :math:`\beta u'`,
a nonlinear restoring (spring) force :math:`s(u)`, and some
known excitation force :math:`F(t)`:

.. _Eq:trunc:vib:gen:ode1:

.. math::

    \tag{485}
    mu'' + \beta u' + s(u) =F(t)\tp
        
        

The coefficient :math:`m` usually represents the mass of the system.
This governing equation can by discretized by centered differences:

.. _Eq:_auto149:

.. math::

    \tag{486}
    [mD_tD_t u + \beta D_{2t} u + s(u)=F]^n
        \tp
        
        

The exact solution :math:`\uex` fulfills the discrete equations with a residual term:

.. _Eq:_auto150:

.. math::

    \tag{487}
    [mD_tD_t \uex + \beta D_{2t} \uex + s(\uex)=F + R]^n
        \tp
        
        

Using :ref:`(447) <Eq:trunc:table:fd2:center:eq>`-:ref:`(448) <Eq:trunc:table:fd2:center>` and
:ref:`(437) <Eq:trunc:table:fd1:center2:eq>`-:ref:`(438) <Eq:trunc:table:fd1:center2>` we
get

.. math::
        
        \lbrack mD_tD_t \uex + \beta D_{2t} \uex\rbrack^n &=
        m\uex''(t_n) + \beta\uex'(t_n) + \\ 
        &\quad \left(\frac{m}{12}\uex''''(t_n) +
          \frac{\beta}{6}\uex'''(t_n)\right)\Delta t^2 + \Oof{\Delta t^4}
        

Combining this with the previous equation, we can collect the terms

.. math::
         m\uex''(t_n) + \beta\uex'(t_n) + \omega^2\uex(t_n) + s(\uex(t_n)) - F^n,

and set this sum to zero because :math:`\uex` solves
the differential equation. We are left with
the truncation error

.. _Eq:trunc:vib:gen:R:

.. math::

    \tag{488}
    R^n = \left(\frac{m}{12}\uex''''(t_n) +
          \frac{\beta}{6}\uex'''(t_n)\right)\Delta t^2 + \Oof{\Delta t^4},
        
        

so the scheme is of second order.

According to :ref:`(488) <Eq:trunc:vib:gen:R>`, we can add correction terms

.. math::
         C^n = \left(\frac{m}{12}\uex''''(t_n) +
          \frac{\beta}{6}\uex'''(t_n)\right)\Delta t^2,

to the right-hand side of the ODE to obtain a fourth-order scheme.
However, expressing :math:`u''''` and :math:`u'''` in terms
of lower-order derivatives is now harder because the differential equation
is more complicated:

.. math::
        
        u''' &= \frac{1}{m}(F' - \beta u'' - s'(u)u'),\\ 
        u'''' &= \frac{1}{m}(F'' - \beta u''' - s''(u)(u')^2 - s'(u)u''),\\ 
        &= \frac{1}{m}(F'' - \beta \frac{1}{m}(F' - \beta u'' - s'(u)u')
        - s''(u)(u')^2 - s'(u)u'')\tp
        

It is not impossible to discretize the resulting modified ODE, but it is up
to debate whether correction terms are feasible and the way to go.
Computing with a smaller :math:`\Delta t` is usually always possible in these
problems to achieve the desired accuracy.

Extension to quadratic damping
------------------------------

Instead of the linear damping term :math:`\beta u'` in :ref:`(485) <Eq:trunc:vib:gen:ode1>`
we now consider quadratic damping :math:`\beta |u'|u'`:

.. _Eq:trunc:vib:gen:ode2:

.. math::

    \tag{489}
    mu'' + \beta |u'|u' + s(u) =F(t)\tp
        
        

A centered difference for :math:`u'` gives rise to a nonlinearity, which can
be linearized using a geometric mean:
:math:`[|u'|u']^n \approx |[u']^{n-\half}|[u']^{n+\half}`.
The resulting scheme becomes

.. _Eq:_auto151:

.. math::

    \tag{490}
    [mD_t D_t u]^n + \beta |[D_{t} u]^{n-\half}|[D_t u]^{n+\half}
        + s(u^n)=F^n\tp
        
        

The truncation error is defined through

.. _Eq:_auto152:

.. math::

    \tag{491}
    [mD_t D_t \uex]^n +
        \beta |[D_{t} \uex]^{n-\half}|[D_t \uex]^{n+\half}
        + s(\uex^n)-F^n = R^n\tp
        
        

We start with expressing the truncation error of the geometric mean.
According to :ref:`(453) <Eq:trunc:table:avg:geom:eq>`-:ref:`(454) <Eq:trunc:table:avg:geom>`,

.. math::
        
        |[D_{t} \uex]^{n-\half}|[D_t \uex]^{n+\half}
        = [|D_t\uex|D_t\uex]^n
        - \frac{1}{4}u'(t_n)^2\Delta t^2  + \frac{1}{4}u(t_n)u''(t_n)\Delta t^2
        + \Oof{\Delta t^4}\tp
        

Using :ref:`(435) <Eq:trunc:table:fd1:center:eq>`-:ref:`(436) <Eq:trunc:table:fd1:center>`
for the :math:`D_t\uex` factors results in

.. math::
        
        [|D_t\uex|D_t\uex]^n = |\uex' + \frac{1}{24}\uex'''(t_n)\Delta t^2 +
        \Oof{\Delta t^4}|(\uex' + \frac{1}{24}\uex'''(t_n)\Delta t^2 +
        \Oof{\Delta t^4})

We can remove the absolute value since it essentially gives a factor 1 or -1
only. Calculating the product, we have the leading-order terms

.. math::
        
        [D_t\uex D_t\uex]^n = (\uex'(t_n))^2 +
        \frac{1}{12}\uex(t_n)\uex'''(t_n)\Delta t^2 +
        \Oof{\Delta t^4}\tp

With

.. math::
         m[D_t D_t\uex]^n = m\uex''(t_n) + \frac{m}{12}\uex''''(t_n)\Delta t^2
        +\Oof{\Delta t^4},

and using the differential equation on the
form :math:`mu'' + \beta (u')^2 + s(u)=F`, we end up with

.. math::
         R^n = (\frac{m}{12}\uex''''(t_n) +
        \frac{\beta}{12}\uex(t_n)\uex'''(t_n))
        \Delta t^2 + \Oof{\Delta t^4}\tp

This result demonstrates that we have
second-order accuracy also with quadratic damping.
The key elements that lead to the second-order accuracy is that
the difference approximations are :math:`\Oof{\Delta t^2}` *and* the
geometric mean approximation is also of :math:`\Oof{\Delta t^2}`.

.. _trunc:vib:gen:staggered:

The general model formulated as first-order ODEs
------------------------------------------------

The second-order model :ref:`(489) <Eq:trunc:vib:gen:ode2>` can be
formulated as a first-order system,

.. _Eq:trunc:vib:gen:2x2model:ode:u:

.. math::

    \tag{492}
    u' = v,
         
        

.. _Eq:trunc:vib:gen:2x2model:ode:v:

.. math::

    \tag{493}
    v' = \frac{1}{m}\left( F(t) - \beta |v|v - s(u)\right)\tp
        
        

The system :ref:`(492) <Eq:trunc:vib:gen:2x2model:ode:u>`-:ref:`(492) <Eq:trunc:vib:gen:2x2model:ode:u>` can be solved either by a forward-backward scheme or a centered
scheme on a staggered mesh.

The forward-backward scheme
~~~~~~~~~~~~~~~~~~~~~~~~~~~

The discretization is based on the idea of stepping
:ref:`(492) <Eq:trunc:vib:gen:2x2model:ode:u>` forward in time and then
using a backward difference in :ref:`(493) <Eq:trunc:vib:gen:2x2model:ode:v>`
with the recently computed (and therefore known) :math:`u`:

.. _Eq:trunc:vib:gen:2x2model:ode:u:fw:

.. math::

    \tag{494}
    \lbrack D_t^+ u = v \rbrack^n,
         
        

.. _Eq:trunc:vib:gen:2x2model:ode:v:bw:

.. math::

    \tag{495}
    \lbrack D_t^-v = \frac{1}{m}( F(t) - \beta |v|v - s(u)) \rbrack^{n+1}\tp
        
        

The term :math:`|v|v` gives rise to a nonlinearity :math:`|v^{n+1}|v^{n+1}`,
which can be linearized as :math:`|v^{n}|v^{n+1}`:

.. _Eq:trunc:vib:gen:2x2model:ode:u:fw2:

.. math::

    \tag{496}
    \lbrack D_t^+ u = v \rbrack^n,
         
        

.. _Eq:trunc:vib:gen:2x2model:ode:v:bw2:

.. math::

    \tag{497}
    \lbrack D_t^-v \rbrack^{n+1} = \frac{1}{m}( F(t_{n+1}) - \beta |v^n|v^{n+1} - s(u^{n+1}))\tp
        
        

Each ODE will have a truncation error when inserting the exact
solutions :math:`\uex` and :math:`\vex` in
:ref:`(494) <Eq:trunc:vib:gen:2x2model:ode:u:fw>`-:ref:`(495) <Eq:trunc:vib:gen:2x2model:ode:v:bw>`:

.. _Eq:trunc:vib:gen:2x2model:ode:u:fw:R:

.. math::

    \tag{498}
    \lbrack D_t^+ \uex = \vex + R_u \rbrack^n,
         
        

.. _Eq:trunc:vib:gen:2x2model:ode:v:bw:R:

.. math::

    \tag{499}
    \lbrack D_t^-\vex \rbrack^{n+1} = \frac{1}{m}( F(t_{n+1}) - \beta |\vex(t_n)|\vex(t_{n+1}) - s(\uex(t_{n+1}))) + R_v^{n+1}\tp
        
        

Application of :ref:`(441) <Eq:trunc:table:fd1:fw:eq>`-:ref:`(442) <Eq:trunc:table:fd1:fw>`
and :ref:`(439) <Eq:trunc:table:fd1:bw:eq>`-:ref:`(440) <Eq:trunc:table:fd1:bw>` in
:ref:`(498) <Eq:trunc:vib:gen:2x2model:ode:u:fw:R>` and
:ref:`(499) <Eq:trunc:vib:gen:2x2model:ode:v:bw:R>`, respectively, gives

.. _Eq:trunc:vib:gen:2x2model:ode:u:fw:R2:

.. math::

    \tag{500}
    \uex'(t_n) + \half\uex''(t_n)\Delta t + \Oof{\Delta t^2}
        = \vex(t_n) + R_u^n,
        
        

.. math::
          
        \vex'(t_{n+1}) - \half\vex''(t_{n+1})\Delta t + \Oof{\Delta t^2}
        = \frac{1}{m}(F(t_{n+1}) - \beta|\vex(t_n)|\vex(t_{n+1}) +\nonumber
        

.. _Eq:trunc:vib:gen:2x2model:ode:v:bw:R2:

.. math::

    \tag{501}
    \quad s(\uex(t_{n+1}))+ R_v^n\tp
        
        

Since :math:`\uex ' = \vex`, :ref:`(500) <Eq:trunc:vib:gen:2x2model:ode:u:fw:R2>`
gives

.. math::
         R_u^n = \half\uex''(t_n)\Delta t + \Oof{\Delta t^2}\tp

In :ref:`(501) <Eq:trunc:vib:gen:2x2model:ode:v:bw:R2>` we can collect the
terms that constitute the ODE, but the damping term has the wrong
form.
Let us drop the absolute value in the damping term for simplicity.
Adding a subtracting the right form :math:`v^{n+1}v^{n+1}` helps:

.. math::
        
        \vex'(t_{n+1}) &-
        \frac{1}{m}(F(t_{n+1}) - \beta \vex(t_{n+1})\vex(t_{n+1}) +
        s(\uex(t_{n+1})) + \\ 
        & (\beta \vex(t_n)\vex(t_{n+1}) - \beta \vex(t_{n+1})\vex(t_{n+1}))),
        

which reduces to

.. math::
        
        \frac{\beta}{m}\vex(t_{n+1}(\vex(t_n) - \vex(t_{n+1}))
        &= \frac{\beta}{m}\vex(t_{n+1}[D_t^-\vex]^{n+1}\Delta t\\ 
        &= \frac{\beta}{m}\vex(t_{n+1}(\vex'(t_{n+1})\Delta t +
        -\half\vex'''(t_{n+1})\Delta t^ + \Oof{\Delta t^3})\tp
        

We end with :math:`R_u^n` and :math:`R_v^{n+1}` as :math:`\Oof{\Delta t}`, simply because
all the building blocks in the schemes (the forward and backward
differences and the linearization trick) are only first-order
accurate. However, this analysis is misleading: the building blocks
play together in a way that makes the scheme second-order accurate.
This is shown by considering an alternative, yet equivalent, formulation
of the above scheme.

A centered scheme on a staggered mesh
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

We now introduce a staggered mesh where we
seek :math:`u` at mesh points :math:`t_n` and :math:`v` at points :math:`t_{n+\half}`
in between the :math:`u` points. The staggered mesh makes it easy to
formulate centered differences in the system
:ref:`(492) <Eq:trunc:vib:gen:2x2model:ode:u>`-:ref:`(492) <Eq:trunc:vib:gen:2x2model:ode:u>`:

.. _Eq:trunc:vib:gen:2x2model:ode:u:staggered:

.. math::

    \tag{502}
    \lbrack D_t u = v \rbrack^{n-\half},
         
        

.. _Eq:trunc:vib:gen:2x2model:ode:v:staggered:

.. math::

    \tag{503}
    \lbrack D_t v = \frac{1}{m}( F(t) - \beta |v|v - s(u)) \rbrack^{n}\tp
        
        

The term :math:`|v^n|v^n` causes trouble since :math:`v^n` is not computed, only
:math:`v^{n-\half}` and :math:`v^{n+\half}`. Using geometric mean,
we can express :math:`|v^n|v^n` in terms of known quantities:
:math:`|v^n|v^n \approx |v^{n-\half}|v^{n+\half}`.
We then have

.. _Eq:trunc:vib:gen:2x2model:ode:u:staggered2:

.. math::

    \tag{504}
    \lbrack D_t u \rbrack^{n-\half} = v^{n-\half},
         
        

.. _Eq:trunc:vib:gen:2x2model:ode:v:staggered2:

.. math::

    \tag{505}
    \lbrack D_t v \rbrack^n = \frac{1}{m}( F(t_n) -
        \beta |v^{n-\half}|v^{n+\half} - s(u^n))\tp
        
        

The truncation error in each equation fulfills

.. math::
        
        \lbrack D_t \uex \rbrack^{n-\half} &= \vex(t_{n-\half}) + R_u^{n-\half},\\ 
        \lbrack D_t \vex \rbrack^n &= \frac{1}{m}( F(t_n) -
        \beta |\vex(t_{n-\half})|\vex(t_{n+\half}) - s(u^n)) + R_v^n\tp
        

The truncation error of the centered differences is given
by :ref:`(435) <Eq:trunc:table:fd1:center:eq>`-:ref:`(436) <Eq:trunc:table:fd1:center>`,
and the geometric mean approximation
analysis can be taken from :ref:`(453) <Eq:trunc:table:avg:geom:eq>`-:ref:`(454) <Eq:trunc:table:avg:geom>`.
These results lead to

.. math::
        
        \uex'(t_{n-\half}) +
        \frac{1}{24}\uex'''(t_{n-\half})\Delta t^2 + \Oof{\Delta t^4}
        = \vex(t_{n-\half}) + R_u^{n-\half},

and

.. math::
        
        \vex'(t_n) =
        \frac{1}{m}( F(t_n) -
        \beta |\vex(t_n)|\vex(t_n) + \Oof{\Delta t^2} - s(u^n)) + R_v^n\tp
        

The ODEs fulfilled by :math:`\uex` and :math:`\vex` are evident in these equations,
and we achieve second-order accuracy for the truncation error
in both equations:

.. math::
         R_u^{n-\half}= \Oof{\Delta t^2}, \quad R_v^n = \Oof{\Delta t^2}\tp

Comparing
:ref:`(504) <Eq:trunc:vib:gen:2x2model:ode:u:staggered2>`-:ref:`(505) <Eq:trunc:vib:gen:2x2model:ode:v:staggered2>`
with
:ref:`(496) <Eq:trunc:vib:gen:2x2model:ode:u:fw2>`-:ref:`(497) <Eq:trunc:vib:gen:2x2model:ode:v:bw2>`,
we can hopefully realize that these schemes are equivalent (which
becomes clear when we implement both).  The obvious advantage with the
staggered mesh approach is that we can all the way use second-order
accurate building blocks and in this way convince ourselves that the
resulting scheme has an error of :math:`\Oof{\Delta t^2}`.

