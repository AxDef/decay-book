.. !split

Truncation errors in wave equations
===================================

.. _trunc:wave:1D:

Linear wave equation in 1D
--------------------------

The standard, linear wave equation in 1D for a function :math:`u(x,t)` reads

.. _Eq:trunc:wave:pde1D:

.. math::

    \tag{506}
    \frac{\partial^2 u}{\partial t^2} = c^2\frac{\partial^2 u}{\partial x^2} + f(x,t),\quad x\in (0, L),\ t\in (0,T],
        
        

where :math:`c` is the constant wave velocity of the physical medium :math:`[0,L]`.
The equation can also be more compactly written as

.. _Eq:trunc:wave:pde1D:v2:

.. math::

    \tag{507}
    u_{tt} = c^2u_{xx} + f,\quad x\in (0, L),\ t\in (0,T],
        
        

Centered, second-order finite differences are a natural choice for
discretizing the derivatives, leading to

.. _Eq:trunc:wave:pde1D:fd:

.. math::

    \tag{508}
    [D_t D_t u = c^2 D_xD_x u + f]^n_i
        
        \tp
        

Inserting the exact solution :math:`\uex(x,t)` in :ref:`(508) <Eq:trunc:wave:pde1D:fd>`
makes this function fulfill the equation if we add the
term :math:`R`:

.. _Eq:trunc:wave:pde1D:fd:R:

.. math::

    \tag{509}
    [D_t D_t \uex = c^2 D_xD_x \uex + f + R]^n_i
        
        

Our purpose is to calculate the truncation error :math:`R`.
From :ref:`(447) <Eq:trunc:table:fd2:center:eq>`-:ref:`(448) <Eq:trunc:table:fd2:center>` we have that

.. math::
         [D_t D_t\uex]_i^n = \uexd{tt}(x_i,t_n) +
        \frac{1}{12}\uexd{tttt}(x_i,t_n)\Delta t^2 + \Oof{\Delta t^4},
        

when we use a notation taking into account that :math:`\uex` is a function
of two variables and that derivatives must be partial derivatives.
The notation :math:`\uexd{tt}` means :math:`\partial^2\uex /\partial t^2`.

The same formula may also be applied to the :math:`x`-derivative term:

.. math::
         [D_xD_x\uex]_i^n = \uexd{xx}(x_i,t_n) +
        \frac{1}{12}\uexd{xxxx}(x_i,t_n)\Delta x^2 + \Oof{\Delta x^4},
        

Equation :ref:`(509) <Eq:trunc:wave:pde1D:fd:R>` now becomes

.. math::
        
        \uexd{tt}
        + \frac{1}{12}\uexd{tttt}(x_i,t_n)\Delta t^2  &=
        c^2\uexd{xx} +
        c^2\frac{1}{12}\uexd{xxxx}(x_i,t_n)\Delta x^2 + f(x_i,t_n) + \\ 
        & \quad  \Oof{\Delta t^4,\Delta x^4} + R^n_i
        \tp
        

Because :math:`\uex` fulfills the partial differential equation (PDE)
:ref:`(507) <Eq:trunc:wave:pde1D:v2>`, the first, third, and fifth terms cancel out,
and we are left with

.. _Eq:trunc:wave:1D:R:

.. math::

    \tag{510}
    R^n_i = \frac{1}{12}\uexd{tttt}(x_i,t_n)\Delta t^2 -
        c^2\frac{1}{12}\uexd{xxxx}(x_i,t_n)\Delta x^2 +
        \Oof{\Delta t^4,\Delta x^4},
        
        

showing that the scheme :ref:`(508) <Eq:trunc:wave:pde1D:fd>` is of second order
in the time and space mesh spacing.

.. _trunc:wave:1D:corr:

Finding correction terms
------------------------

Can we add correction terms to the PDE and increase the order of
:math:`R^n_i` in :ref:`(510) <Eq:trunc:wave:1D:R>`? The starting point is

.. _Eq:trunc:wave:pde1D:fd:R2:

.. math::

    \tag{511}
    [D_t D_t \uex = c^2 D_xD_x \uex + f + C + R]^n_i
        
        

From the previous analysis we simply get :ref:`(510) <Eq:trunc:wave:1D:R>`
again, but now with :math:`C`:

.. _Eq:trunc:wave:1D:R:C:

.. math::

    \tag{512}
    R^n_i + C_i^n = \frac{1}{12}\uexd{tttt}(x_i,t_n)\Delta t^2 -
        c^2\frac{1}{12}\uexd{xxxx}(x_i,t_n)\Delta x^2 +
        \Oof{\Delta t^4,\Delta x^4}\tp
        
        

The idea is to let :math:`C_i^n` cancel the :math:`\Delta t^2` and :math:`\Delta x^2`
terms to make :math:`R^n_i = \Oof{\Delta t^4,\Delta x^4}`:

.. math::
         C_i^n =
        \frac{1}{12}\uexd{tttt}(x_i,t_n)\Delta t^2 -
        c^2\frac{1}{12}\uexd{xxxx}(x_i,t_n)\Delta x^2\tp
        

Essentially, it means that we add a new term

.. math::
         C = \frac{1}{12}\left( u_{tttt}\Delta t^2 - c^2u_{xxxx}\Delta x^2\right),
        

to the right-hand side of the PDE.
We must either discretize these 4th-order derivatives directly or
rewrite them in terms of lower-order derivatives with the aid of the
PDE. The latter approach is more feasible. From the PDE we have that

.. math::
         \frac{\partial^2}{\partial t^2} = c^2\frac{\partial^2}{\partial x^2},

so

.. math::
         u_{tttt} = c^2u_{xxtt},\quad u_{xxxx} = c^{-2}u_{ttxx}\tp

Assuming :math:`u` is smooth enough that :math:`u_{xxtt}=u_{ttxx}`, these relations
lead to

.. math::
         C = \frac{1}{12}((c^2\Delta t^2 - \Delta x^2)u_{xx})_{tt}\tp

A natural discretization is

.. math::
        
        C^n_i = \frac{1}{12}((c^2\Delta t^2 - \Delta x^2)
        [D_xD_xD_tD_t u]^n_i\tp

Writing out :math:`[D_xD_xD_tD_t u]^n_i` as
:math:`[D_xD_x (D_tD_t u)]^n_i` gives

.. math::
        
        \frac{1}{\Delta t^2}\biggl(
        &\frac{u^{n+1}_{i+1} - 2u^{n}_{i+1} + u^{n-1}_{i+1}}{\Delta x^2} -2\\ 
        &\frac{u^{n+1}_{i} - 2u^{n}_{i} + u^{n-1}_{i}}{\Delta x^2} +
        &\frac{u^{n+1}_{i-1} - 2u^{n}_{i-1} + u^{n-1}_{i-1}}{\Delta x^2}
        \biggr)
        

Now the unknown values :math:`u^{n+1}_{i+1}`, :math:`u^{n+1}_{i}`,
and :math:`u^{n+1}_{i-1}` are *coupled*, and we must solve a tridiagonal
system to find them. This is in principle straightforward, but it
results in an implicit finite difference schemes, while we had
a convenient explicit scheme without the correction terms.

.. _trunc:wave:1D:varcoeff:

Extension to variable coefficients          (2)
-----------------------------------------------

Now we address the variable coefficient version of the linear 1D
wave equation,

.. math::
        
        \frac{\partial^2 u}{\partial t^2} = \frac{\partial}{\partial x}
        \left( \lambda(x)\frac{\partial u}{\partial x}\right),
        

or written more compactly as

.. _Eq:trunc:wave:1D:varcoeff:pde:

.. math::

    \tag{513}
    u_{tt} = (\lambda u_x)_x\tp
        
        

The discrete counterpart to this equation, using arithmetic mean for
:math:`\lambda` and centered differences, reads

.. _Eq:trunc:wave:1D:varcoeff:fd:

.. math::

    \tag{514}
    [D_t D_t u = D_x \overline{\lambda}^{x}D_x u]^n_i\tp
        
        

The truncation error is the residual :math:`R` in the equation

.. _Eq:trunc:wave:1D:varcoef:fd:R:

.. math::

    \tag{515}
    [D_t D_t \uex = D_x \overline{\lambda}^{x}D_x \uex + R]^n_i\tp
        
        

The difficulty in the present is how to compute the truncation error of
the term :math:`[D_x \overline{\lambda}^{x}D_x \uex]^n_i`.

We start by writing out the outer operator:

.. _Eq:trunc:wave:1D:varcoeff:outer:

.. math::

    \tag{516}
    [D_x \overline{\lambda}^{x}D_x \uex]^n_i =
        \frac{1}{\Delta x}\left(
        [\overline{\lambda}^{x}D_x \uex]^n_{i+\half} -
        [\overline{\lambda}^{x}D_x \uex]^n_{i-\half}
        \right).
        
        

With the aid of :ref:`(435) <Eq:trunc:table:fd1:center:eq>`-:ref:`(436) <Eq:trunc:table:fd1:center>`
and :ref:`(451) <Eq:trunc:table:avg:arith:eq>`-:ref:`(452) <Eq:trunc:table:avg:arith>` we have

.. math::
        
        \lbrack D_x \uex \rbrack^n_{i+\half} & = \uexd{x}(x_{i+\half},t_n) +
        \frac{1}{24}\uexd{xxx}(x_{i+\half},t_n)\Delta x^2 +
        \Oof{\Delta x^4},\\ 
        \lbrack\overline{\lambda}^{x}\rbrack_{i+\half}
        &= \lambda(x_{i+\half}) +
        \frac{1}{8}\lambda''(x_{i+\half})\Delta x^2
        + \Oof{\Delta x^4},\\ 
        [\overline{\lambda}^{x}D_x \uex]^n_{i+\half} &=
        (\lambda(x_{i+\half}) +
        \frac{1}{8}\lambda''(x_{i+\half})\Delta x^2
        + \Oof{\Delta x^4})\times\\ 
        &\quad (\uexd{x}(x_{i+\half},t_n) +
        \frac{1}{24}\uexd{xxx}(x_{i+\half},t_n)\Delta x^2 +
        \Oof{\Delta x^4})\\ 
        &= \lambda(x_{i+\half})\uexd{x}(x_{i+\half},t_n)
        + \lambda(x_{i+\half})
        \frac{1}{24}\uexd{xxx}(x_{i+\half},t_n)\Delta x^2 + \\ 
        &\quad \uexd{x}(x_{i+\half})
        \frac{1}{8}\lambda''(x_{i+\half})\Delta x^2
        +\Oof{\Delta x^4}\\ 
        &= [\lambda \uexd{x}]^n_{i+\half} + G^n_{i+\half}\Delta x^2
        +\Oof{\Delta x^4},
        

where we have introduced the short form

.. math::
         G^n_{i+\half} =
        (\frac{1}{24}\uexd{xxx}(x_{i+\half},t_n)\lambda((x_{i+\half})
        + \uexd{x}(x_{i+\half},t_n)
        \frac{1}{8}\lambda''(x_{i+\half}))\Delta x^2\tp

Similarly, we find that

.. math::
        
        \lbrack\overline{\lambda}^{x}D_x \uex\rbrack^n_{i-\half} =
        [\lambda \uexd{x}]^n_{i-\half} + G^n_{i-\half}\Delta x^2
        +\Oof{\Delta x^4}\tp

Inserting these expressions in the outer operator :ref:`(516) <Eq:trunc:wave:1D:varcoeff:outer>`
results in

.. math::
        
        \lbrack D_x \overline{\lambda}^{x}D_x \uex \rbrack^n_i &=
        \frac{1}{\Delta x}(
        [\overline{\lambda}^{x}D_x \uex]^n_{i+\half} -
        [\overline{\lambda}^{x}D_x \uex]^n_{i-\half}
        )\\ 
        &= \frac{1}{\Delta x}(
        [\lambda \uexd{x}]^n_{i+\half} +
        G^n_{i+\half}\Delta x^2 -
        [\lambda \uexd{x}]^n_{i-\half} -
        G^n_{i-\half}\Delta x^2 +
        \Oof{\Delta x^4}
        )\\ 
        &= [D_x \lambda \uexd{x}]^n_i + [D_x G]^n_i\Delta x^2 + \Oof{\Delta x^4}\tp
        

The reason for :math:`\Oof{\Delta x^4}` in the remainder is that there
are coefficients in front of this term, say :math:`H\Delta x^4`, and the
subtraction and division by :math:`\Delta x` results in :math:`[D_x H]^n_i\Delta x^4`.

We can now use :ref:`(435) <Eq:trunc:table:fd1:center:eq>`-:ref:`(436) <Eq:trunc:table:fd1:center>`
to express the :math:`D_x` operator
in :math:`[D_x \lambda \uexd{x}]^n_i`
as a derivative and a truncation error:

.. math::
        
        [D_x \lambda \uexd{x}]^n_i =
        \frac{\partial}{\partial x}\lambda(x_i)\uexd{x}(x_i,t_n)
        + \frac{1}{24}(\lambda\uexd{x})_{xxx}(x_i,t_n)\Delta x^2
        + \Oof{\Delta x^4}\tp
        

Expressions like :math:`[D_x G]^n_i\Delta x^2` can be treated in an identical
way,

.. math::
         [D_x G]^n_i\Delta x^2 = G_x(x_i,t_n)\Delta x^2
        + \frac{1}{24}G_{xxx}(x_i,t_n)\Delta x^4 + \Oof{\Delta x^4}\tp
        

There will be a number of terms with the :math:`\Delta x^2` factor. We
lump these now into :math:`\Oof{\Delta x^2}`.
The result of the truncation error analysis of the spatial derivative
is therefore summarized as

.. math::
         [D_x \overline{\lambda}^{x}D_x \uex]^n_i =
        \frac{\partial}{\partial x}
        \lambda(x_i)\uexd{x}(x_i,t_n) +
        \Oof{\Delta x^2}\tp
        

After having treated the :math:`[D_tD_t\uex]^n_i` term as well, we achieve

.. math::
         R^n_i = \Oof{\Delta x^2} +
        \frac{1}{12}\uexd{tttt}(x_i,t_n)\Delta t^2
        \tp

The main conclusion is that the scheme is of second-order in time
and space also in this variable coefficient case. The key ingredients
for second order are the centered differences and the arithmetic
mean for :math:`\lambda`: all those building blocks feature second-order accuracy.

1D wave equation on a staggered mesh
------------------------------------

.. _trunc:wave:2D:

Linear wave equation in 2D/3D
-----------------------------

The two-dimensional extension of :ref:`(506) <Eq:trunc:wave:pde1D>` takes the form

.. _Eq:trunc:wave:pde2D:

.. math::

    \tag{517}
    \frac{\partial^2 u}{\partial t^2} = c^2\left(\frac{\partial^2 u}{\partial x^2}
        + \frac{\partial^2 u}{\partial y^2}\right) + f(x,y,t),\quad (x,y)\in (0, L)\times (0,H),\ t\in (0,T],
        
        

where now :math:`c(x,y)` is the constant wave velocity of the physical medium
:math:`[0,L]\times [0,H]`. In the compact notation, the PDE
:ref:`(517) <Eq:trunc:wave:pde2D>` can be written

.. _Eq:trunc:wave:pde2D:v2:

.. math::

    \tag{518}
    u_{tt} = c^2(u_{xx} + u_{yy}) + f(x,y,t),\quad (x,y)\in (0, L)\times (0,H),
        \ t\in (0,T],
        
        

in 2D, while the 3D version reads

.. _Eq:trunc:wave:pde3D:v2:

.. math::

    \tag{519}
    u_{tt} = c^2(u_{xx} + u_{yy} + u_{zz}) + f(x,y,z,t),
        
        

for :math:`(x,y,z)\in (0, L)\times (0,H)\times (0,B)` and
:math:`t\in (0,T]`.

Approximating the second-order derivatives by the standard
formulas :ref:`(447) <Eq:trunc:table:fd2:center:eq>`-:ref:`(448) <Eq:trunc:table:fd2:center>`
yields the scheme

.. _Eq:_auto153:

.. math::

    \tag{520}
    [D_t D_t u = c^2(D_xD_x u + D_yD_y u) + f]^n_{i,j,k}
        \tp
        
        

The truncation error is found from

.. _Eq:_auto154:

.. math::

    \tag{521}
    [D_t D_t \uex = c^2(D_xD_x \uex + D_yD_y \uex) + f + R]^n
        \tp
        
        

The calculations from the 1D case can be repeated to the
terms in the :math:`y` and :math:`z` directions. Collecting terms that
fulfill the PDE, we end up with

.. _Eq:_auto155:

.. math::

    \tag{522}
    R^n_{i,j,k}  = [\frac{1}{12}\uexd{tttt}\Delta t^2 -
        c^2\frac{1}{12}\left( \uexd{xxxx}\Delta x^2
        + \uexd{yyyy}\Delta x^2
        + \uexd{zzzz}\Delta z^2\right)]^n_{i,j,k} +
        
        

.. math::
          
        \quad \Oof{\Delta t^4,\Delta x^4,\Delta y^4,\Delta z^4}\nonumber
        \tp
        

