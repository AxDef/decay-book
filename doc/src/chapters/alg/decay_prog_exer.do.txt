======= Exercises =======

===== Exercise: Define a mesh function and visualize it =====

label{decay:exer:meshfunc}
file=mesh_function

!bsubex
Write a function `mesh_function(f, t)` that returns an array with
mesh point values $f(t_0),\ldots,f(t_{N_t})$, where `f` is a Python
function implementing a mathematical function `f(t)` and $t_0,\ldots,t_{N_t}$
are mesh points stored in the array `t`. Use a loop over the mesh
points and compute one mesh function value at the time.

!bsol
The function may look like

@@@CODE exer-alg/mesh_function.py fromto: def mesh_function@def demo
!esol
!esubex

!bsubex
Use `mesh_function` to compute the mesh function corresponding to

!bt
\[
f(t) = \left\lbrace
\begin{array}{ll}
e^{-t},& 0\leq t\leq 3,\\
e^{-3t}, & 3 < t\leq 4
\end{array}\right.
\]
!et
Choose a mesh $t_n=n\Delta t$ with $\Delta t=0.1$.
Plot the mesh function.

!bsol
An appropriate function is

@@@CODE exer-alg/mesh_function.py fromto: def demo@
!esol

!esubex

!bremarks
In Section ref{decay:computing:error} we show how easy it is to
compute a mesh function by array arithmetics (or array computing).
Using this technique, one could simply implement `mesh_function(f,t)`
as `return f(t)`. However, `f(t)` will not work if there are
if tests involving `t` inside `f` as is the case in b). Typically,
`if t < 3` must have `t < 3` as a boolean expression, but if `t` is
array, `t < 3`, is an *array of boolean values*, which is not legal
as a boolean expression in an if test.
Computing one element
at a time as suggested in a) is a way of out of this problem.

We also remark that the function in b) is the solution of $u^{\prime}=-au$,
$u(0)=1$, for $t\in [0,4]$, where $a=1$ for $t\in [0,3]$ and $a=3$ for
$t\in [3,4]$.
!eremarks


===== Problem: Differentiate a function =====

label{decay:exer:dudt}
file=differentiate

idx{array arithmetics} idx{array computing} idx{vectorization}

Given a mesh function $u^n$ as an array `u` with $u^n$ values at mesh
points $t_n=n\Delta t$, the discrete derivative can be based on
centered differences:

!bt
\begin{equation}
d^n = [D_{2t}u]^n =
\frac{u^{n+1}-u^{n-1}}{2\Delta t},\quad n=1,\ldots,N_t-1\tp
label{decay:exer:dudt:D2t}
\end{equation}
!et
At the end points we use forward and backward differences:

!bt
\[ d^0 = [D_t^+u]^n = \frac{u^{1}-u^{0}}{\Delta t},\]
!et
and

!bt
\[ d^{N_t} = [D_t^-u]^n = \frac{u^{N_t}-u^{N_t-1}}{\Delta t}\tp\]
!et

!bsubex
Write a function
`differentiate(u, dt)` that returns the discrete derivative $d^n$ of the
mesh function $u^n$. The parameter `dt` reflects the
mesh spacing $\Delta t$. Write a corresponding test function
`test_differentiate()` for verifying the implementation.

!bhint
The three differentiation formulas are
exact for quadratic polynomials. Use this property to verify the program.
!ehint

!bsol
The functions can be written as

@@@CODE exer-alg/differentiate.py fromto: import numpy@def differentiate_vec
!esol
!esubex

!bsubex
A standard implementation of the formula (ref{decay:exer:dudt:D2t}) is to
have a loop over $i$. For large $N_t$, such loop may run slowly in
Python. A technique for speeding up the computations, called vectorization
or array computing,
replaces the loop by array operations. To see how this can be done in
the present mathematical problem, we
define two arrays

!bt
\begin{align*}
u^+ &= (u^2,u^3,\ldots,u^{N_t}),
u^- &= (u^0,u^1,\ldots,u^{N_t-2})\tp
\end{align*}
!et
The formula (ref{decay:exer:dudt:D2t}) can now be expressed as

!bt
\[ (d^1,d^2,\ldots,d^{N_t-1}) = \frac{1}{2\Delta t}(u^+ - u^-)\tp\]
!et
The corresponding Python code reads

!bc pycod
d[1:-1] = (u[2:] - u[0:-2])/(2*dt)
# or
d[1:N_t] = (u[2:N_t+1] - u[0:N_t-1])/(2*dt)
!ec
Recall that an array slice `u[1:-1]` contains the elements in `u` starting
with index 1 and going all indices up to, but not including, the last one
(`-1`).

Use the ideas above to implement a vectorized version of the
`differentiate` function without loops. Make a corresponding
test function that compares the result with that of
`differentiate`.

!bsol
Appropriate functions are

@@@CODE exer-alg/differentiate.py fromto: def differentiate_vec@^test_differ
!esol
!esubex

===== Problem: Experiment with divisions =====

label{decay:exer:intdiv}
file=pyproblems

Explain what happens in the following computations, where
some are mathematically unexpected:

!bc ipy
>>> dt = 3
>>> T = 8
>>> Nt = T/dt
>>> Nt
2
>>> theta = 1; a = 1
>>> (1 - (1-theta)*a*dt)/(1 + theta*dt*a)
0
!ec

!bsol
We add some more investigations of the types and values involved
in the computations:

!bc pyshell
>>> dt = 3
>>> T = 8
>>> Nt = T/dt
>>> Nt
2
>>> type(Nt)
<type 'int'>
>>> from numpy import linspace
>>> theta = 1; a = 1
>>> (1 - (1-theta)*a*dt)/(1 + theta*dt*a)
0
>>> (1 - (1-theta)*a*dt)
1
>>> (1 + theta*dt*a)
2
!ec
From this we realize that the unexpected results are caused by
integer division: `int` object divided by `int` object.
For example,
`Nt` is an integer, not a real as we want, because 8/3 according integer
division is 2, not the 2.66666 approximation to $\frac{8}{3}$.
!esol

===== Problem: Experiment with wrong computations =====

label{decay:exer:decay1err}
file=decay_v1_err

Consider the `solver` function in the "`decay_v1.py`":
"${src_alg}/decay_v1.py" file
and the following call:

!bc pycod
u, t = solver(I=1, a=1, T=7, dt=2, theta=1)
!ec
The output becomes

!bc dat
t= 0.000 u=1
t= 2.000 u=0
t= 4.000 u=0
t= 6.000 u=0
!ec
Print out the result of all intermediate computations and use
`type(v)` to see the object type of the result stored in some variable `v`.
Examine the intermediate calculations and explain
why `u` is wrong and why we compute up to $t=6$ only even though we
specified $T=7$.

!bsol
A code for investigating this problem may look as follows.

@@@CODE exer-alg/decay_v1_err.py
Running this code shows

!bc sys
Terminal> python decay_v1_err.py
1 <type 'int'> 3 <type 'int'> 0 <type 'int'>
1 <type 'int'> 3 <type 'int'> 0 <type 'int'>
1 <type 'int'> 3 <type 'int'> 0 <type 'int'>
t= 0.000 u=1
t= 2.000 u=0
t= 4.000 u=0
t= 6.000 u=0
!ec
We realize that we have integer divided by integer in the numerical
formula, i.e., the result of 1/3 is 0 because of integer division.
This fraction is multiplied by `u[n]`, but the result remains zero.
!esol

===== Problem: Plot the error function =====

label{decay:exer:plot:error}
file=decay_plot_error

Solve the problem $u'=-au$, $u(0)=I$, using the Forward Euler, Backward
Euler, and Crank-Nicolson schemes. For each scheme, plot the error mesh
function $e^n = \uex(t_n)-u^n$ for $\Delta t$, $\frac{1}{4}\Delta t$, and
$\frac{1}{8}\Delta t$, where $\uex$ is the exact solution of the ODE and
$u^n$ is the numerical solution at mesh point $t_n$.

!bhint
Modify the "`decay_plot_mpl.py`": "${src_alg}/decay_plot_mpl.py" code.
!ehint

!bsol
Looking at the `decay_plot_mpl.py` file, we realize that we only
need to change the `explore` method such that the error and not
the solutions are plotted. We also need to run a loop over
$\Delta t$ values and get all the corresponding curves in the same
plot. Quite some editing is necessary. Also the `main` function needs
some edits.

The `solver` and `exact_solution` functions are not altered.
The `explore` and `main` functions as well as the call to `main` are
edited to:

@@@CODE exer-alg/decay_plot_error.py fromto: def explore@

FIGURE: [fig-alg/decay_plot_error, width=800 frac=1]
!esol


===== Problem: Change formatting of numbers and debug =====

label{decay:exer:inexact:output}
file=decay_memsave_v2

The "`decay_memsave.py`":
"${src_alg}/decay_memsave.py" program
writes the time values and solution values to a file which looks
like
!bc
0.0000000000000000E+00  1.0000000000000000E+00
2.0000000000000001E-01  8.3333333333333337E-01
4.0000000000000002E-01  6.9444444444444453E-01
6.0000000000000009E-01  5.7870370370370383E-01
8.0000000000000004E-01  4.8225308641975323E-01
1.0000000000000000E+00  4.0187757201646102E-01
1.2000000000000000E+00  3.3489797668038418E-01
1.3999999999999999E+00  2.7908164723365347E-01
!ec
Modify the file output such that it looks like
!bc dat
0.000  1.00000
0.200  0.83333
0.400  0.69444
0.600  0.57870
0.800  0.48225
1.000  0.40188
1.200  0.33490
1.400  0.27908
!ec
If you have just modified the formatting of numbers in the file,
running the modified program
!bc sys
Terminal> python decay_memsave_v2.py --T 10 --theta 1 \
          --dt 0.2 --makeplot
!ec
leads to printing of the message `Bug in the implementation!` in the
terminal window. Why?

!bsol
The new formatting is obtained by replacing the format `%.16E` for
`t` by `%.3f` and the format for `u` must be `%.5f`.

With only 5 decimals in the file, the `test_solver_minmem` function compares
truncated elements `u`, accurate only to $10^{-5}$ with the
exact discrete solution and applies a far too small `tol` value.
`tol` must be `1E-4`.
!esol
