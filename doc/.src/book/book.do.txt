#TITLE:  A Gentle Introduction to Finite Difference Computing Using Exponential Decay Models: Modeling, Algorithms, Analysis, Programming, and Verification
#TITLE:  A Gentle Introduction to Finite Difference Computing Using Exponential Decay Models
TITLE:  Finite Difference Computing with Exponential Decay Models
AUTHOR: Hans Petter Langtangen  {copyright|CC BY} at Center for Biomedical Computing, Simula Research Laboratory & Department of Informatics, University of Oslo

__Preface.__
This text provides a very simple, initial introduction to the complete
scientific computing pipeline: models, discretization, algorithms,
programming, verification, and visualization. The pedagogical strategy
is to use one case study - an ordinary differential equation
describing exponential decay processes - to illustrate fundamental
concepts in mathematics and computer science. The book is easy to read
and only requires a command of one-variable calculus and some very
basic knowledge about computer programming. Contrary to similar texts
on numerical methods and programming, this text has a much stronger
focus on implementation and teaches testing and software engineering
in particular.

# #ifdef USPs
 * Easy-to-read mathematics with detailed explanations
 * Demonstrates the transition of a mathematical problem to well-tested computer code in detail
 * Uses modern Python-based programming tools and techniques
 * Illustrates the computing pipeline: model, method, algorithm, implementation, testing, and visualization
# #endif

# #ifdef MY_ORIG
This easy-to-read tutorial uses a specific case, exponential decay
models, to introduce the basic ingredients of mathematical modeling on
computers: model derivation, finite difference methods, computational
algorithms, implementation in Python, software testing, visualization,
as well as detailed analysis of the quality of numerical results. The
primary focus is on how mathematical methods are translated to
reusable and well-tested software.  Many classical subjects in
scientific computing are covered in addition to software topics like
user interfaces, unit testing frameworks, class programming, and
automating computer experiments.
# #endif

DATE: today

## Handy mako variables and functions for the preprocessing step
# #include "../chapters/mako_code.txt"


!split
========= Preface  =========
label{ch:preface}

# #include "preface.do.txt"

!split
TOC: on

!split
========= Algorithms and implementations =========
# #include "../chapters/alg/decay_fd1.do.txt"

!split
# #include "../chapters/alg/decay_prog_basic.do.txt"

!split
# #include "../chapters/alg/decay_prog_exer.do.txt"

!split
========= Analysis =========
label{decay:analysis}


# #include "../chapters/analysis/decay_analysis.do.txt"

# #include "../chapters/analysis/errors.do.txt"

# #include "../chapters/analysis/exer.do.txt"


!split
========= Generalizations =========

It is time to consider generalizations of the simple decay model
$u^{\prime}=-au$ and also to look at additional numerical solution
methods.  We consider first variable coefficients, $u^{\prime}=a(t)u +
b(t)$, and later a completely general scalar ODE $u^{\prime}=f(u,t)$
and its generalization to a system of such general ODEs.  Among
numerical methods, we treat implicit multi-step methods, and several
families of explicit methods: Leapfrog schemes, Runge-Kutta methods,
and Adams-Bashforth formulas.

# #include "../chapters/genz/decay_fd2.do.txt"

!split
========= Models =========
label{decay:app}

# #include "../chapters/models/decay_app.do.txt"

!split
========= Scientific software engineering =========
label{decay:se}

# #include "../chapters/softeng/softeng1.do.txt"

# #if FORMAT == "html"
!split
========= Summarizing multiple-choice questions =========

# #include "../chapters/quiz/decay_quiz.do.txt"
# #endif

!split
======= References =======

BIBFILE: ../chapters/papers.pub
